Type analysis for Number
  Concept=Numerical Expr=Concept:Numerical Subs==
  Function: Square(Concept:Numerical x)
  Function: PlusOne(Concept:Numerical x)
  Function: MinusOne(Concept:Numerical x)
  Function: FromOne(Concept:Numerical x)
  Function: IsPositive(Concept:Numerical x)
  Function: GtZ(Concept:Numerical x)
  Function: LtZ(Concept:Numerical x)
  Function: GtEqZ(Concept:Numerical x)
  Function: LtEqZ(Concept:Numerical x)
  Function: IsNegative(Concept:Numerical x)
  Function: Sign(Concept:Numerical x)
  Function: Abs(Concept:Numerical x)
  Function: Half(Concept:Numerical x)
  Function: Quarter(Concept:Numerical x)
  Function: Eighth(Concept:Numerical x)
  Function: Tenth(Concept:Numerical x)
  Function: Twice(Concept:Numerical x)
  Function: SmoothStep(Concept:Numerical x)
  Function: Pow2(Concept:Numerical x)
  Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Arithmetic Expr=Concept:Arithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
      Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
      Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
  Function: Acos(ConcreteType:Number x)
  Function: Asin(ConcreteType:Number x)
  Function: Atan(ConcreteType:Number x)
  Function: Pow(ConcreteType:Number x, ConcreteType:Number y)
  Function: Log(ConcreteType:Number x, ConcreteType:Number y)
  Function: NaturalLog(ConcreteType:Number x)
  Function: NaturalPower(ConcreteType:Number x)
  Function: Add(ConcreteType:Number x, ConcreteType:Number y)
  Function: Subtract(ConcreteType:Number x, ConcreteType:Number y)
  Function: Divide(ConcreteType:Number x, ConcreteType:Number y)
  Function: Multiply(ConcreteType:Number x, ConcreteType:Number y)
  Function: Modulo(ConcreteType:Number x, ConcreteType:Number y)
  Function: Negative(ConcreteType:Number x)
  Function: SquareRoot(ConcreteType:Number x)
  Function: ClampOne(ConcreteType:Number x)
  Function: AlmostZero(ConcreteType:Number x)
  Function: Radians(ConcreteType:Number x)
  Function: Degrees(ConcreteType:Number x)
  Function: Turns(ConcreteType:Number x)
Type analysis for Integer
  Concept=Numerical Expr=Concept:Numerical Subs==
  Function: Square(Concept:Numerical x)
  Function: PlusOne(Concept:Numerical x)
  Function: MinusOne(Concept:Numerical x)
  Function: FromOne(Concept:Numerical x)
  Function: IsPositive(Concept:Numerical x)
  Function: GtZ(Concept:Numerical x)
  Function: LtZ(Concept:Numerical x)
  Function: GtEqZ(Concept:Numerical x)
  Function: LtEqZ(Concept:Numerical x)
  Function: IsNegative(Concept:Numerical x)
  Function: Sign(Concept:Numerical x)
  Function: Abs(Concept:Numerical x)
  Function: Half(Concept:Numerical x)
  Function: Quarter(Concept:Numerical x)
  Function: Eighth(Concept:Numerical x)
  Function: Tenth(Concept:Numerical x)
  Function: Twice(Concept:Numerical x)
  Function: SmoothStep(Concept:Numerical x)
  Function: Pow2(Concept:Numerical x)
  Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Arithmetic Expr=Concept:Arithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
      Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
      Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
  Function: Add(ConcreteType:Integer x, ConcreteType:Integer y)
  Function: Subtract(ConcreteType:Integer x, ConcreteType:Integer y)
  Function: Divide(ConcreteType:Integer x, ConcreteType:Integer y)
  Function: Multiply(ConcreteType:Integer x, ConcreteType:Integer y)
  Function: Modulo(ConcreteType:Integer x, ConcreteType:Integer y)
  Function: Negative(ConcreteType:Integer x)
  Function: ToNumber(ConcreteType:Integer x)
Type analysis for String
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
  Concept=Array Expr=Concept:Array<ConcreteType:Character> Subs=T_391:TypeVariable=ConcreteType:Character=
Type analysis for Boolean
  Concept=BooleanOperations Expr=Concept:BooleanOperations Subs==
  Function: And(ConcreteType:Boolean x, ConcreteType:Boolean y)
  Function: Or(ConcreteType:Boolean x, ConcreteType:Boolean y)
  Function: Not(ConcreteType:Boolean x)
Type analysis for Character
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Dynamic
Type analysis for Count
  Concept=Numerical Expr=Concept:Numerical Subs==
  Function: Square(Concept:Numerical x)
  Function: PlusOne(Concept:Numerical x)
  Function: MinusOne(Concept:Numerical x)
  Function: FromOne(Concept:Numerical x)
  Function: IsPositive(Concept:Numerical x)
  Function: GtZ(Concept:Numerical x)
  Function: LtZ(Concept:Numerical x)
  Function: GtEqZ(Concept:Numerical x)
  Function: LtEqZ(Concept:Numerical x)
  Function: IsNegative(Concept:Numerical x)
  Function: Sign(Concept:Numerical x)
  Function: Abs(Concept:Numerical x)
  Function: Half(Concept:Numerical x)
  Function: Quarter(Concept:Numerical x)
  Function: Eighth(Concept:Numerical x)
  Function: Tenth(Concept:Numerical x)
  Function: Twice(Concept:Numerical x)
  Function: SmoothStep(Concept:Numerical x)
  Function: Pow2(Concept:Numerical x)
  Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Arithmetic Expr=Concept:Arithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
      Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
      Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Index
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Unit
  Concept=Numerical Expr=Concept:Numerical Subs==
  Function: Square(Concept:Numerical x)
  Function: PlusOne(Concept:Numerical x)
  Function: MinusOne(Concept:Numerical x)
  Function: FromOne(Concept:Numerical x)
  Function: IsPositive(Concept:Numerical x)
  Function: GtZ(Concept:Numerical x)
  Function: LtZ(Concept:Numerical x)
  Function: GtEqZ(Concept:Numerical x)
  Function: LtEqZ(Concept:Numerical x)
  Function: IsNegative(Concept:Numerical x)
  Function: Sign(Concept:Numerical x)
  Function: Abs(Concept:Numerical x)
  Function: Half(Concept:Numerical x)
  Function: Quarter(Concept:Numerical x)
  Function: Eighth(Concept:Numerical x)
  Function: Tenth(Concept:Numerical x)
  Function: Twice(Concept:Numerical x)
  Function: SmoothStep(Concept:Numerical x)
  Function: Pow2(Concept:Numerical x)
  Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Arithmetic Expr=Concept:Arithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
      Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
      Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Percent
  Concept=Numerical Expr=Concept:Numerical Subs==
  Function: Square(Concept:Numerical x)
  Function: PlusOne(Concept:Numerical x)
  Function: MinusOne(Concept:Numerical x)
  Function: FromOne(Concept:Numerical x)
  Function: IsPositive(Concept:Numerical x)
  Function: GtZ(Concept:Numerical x)
  Function: LtZ(Concept:Numerical x)
  Function: GtEqZ(Concept:Numerical x)
  Function: LtEqZ(Concept:Numerical x)
  Function: IsNegative(Concept:Numerical x)
  Function: Sign(Concept:Numerical x)
  Function: Abs(Concept:Numerical x)
  Function: Half(Concept:Numerical x)
  Function: Quarter(Concept:Numerical x)
  Function: Eighth(Concept:Numerical x)
  Function: Tenth(Concept:Numerical x)
  Function: Twice(Concept:Numerical x)
  Function: SmoothStep(Concept:Numerical x)
  Function: Pow2(Concept:Numerical x)
  Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Arithmetic Expr=Concept:Arithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
      Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
      Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Quaternion
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Unit2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Unit3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Direction3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for AxisAngle
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for EulerAngles
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Rotation3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Vector2D
  Concept=Vector Expr=Concept:Vector Subs==
  Function: Aggregate(Concept:Vector v, ConcreteType:Function2<ConcreteType:Number,TypeVariable:$T,TypeVariable:$T> f)
  Function: Sum(Concept:Vector v)
  Function: SumSquares(Concept:Vector v)
  Function: MagnitudeSquared(Concept:Vector v)
  Function: Magnitude(Concept:Vector v)
  Function: Dot(Concept:Vector v1, Concept:Vector v2)
  Function: Normal(Concept:Vector v)
  Function: Average(Concept:Vector v)
    Concept=Array Expr=Concept:Array<ConcreteType:Number> Subs=T_391:TypeVariable=ConcreteType:Number=
    Concept=Numerical Expr=Concept:Numerical Subs==
    Function: Square(Concept:Numerical x)
    Function: PlusOne(Concept:Numerical x)
    Function: MinusOne(Concept:Numerical x)
    Function: FromOne(Concept:Numerical x)
    Function: IsPositive(Concept:Numerical x)
    Function: GtZ(Concept:Numerical x)
    Function: LtZ(Concept:Numerical x)
    Function: GtEqZ(Concept:Numerical x)
    Function: LtEqZ(Concept:Numerical x)
    Function: IsNegative(Concept:Numerical x)
    Function: Sign(Concept:Numerical x)
    Function: Abs(Concept:Numerical x)
    Function: Half(Concept:Numerical x)
    Function: Quarter(Concept:Numerical x)
    Function: Eighth(Concept:Numerical x)
    Function: Tenth(Concept:Numerical x)
    Function: Twice(Concept:Numerical x)
    Function: SmoothStep(Concept:Numerical x)
    Function: Pow2(Concept:Numerical x)
    Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
      Concept=Value Expr=Concept:Value Subs==
        Concept=Any Expr=Concept:Any Subs==
        Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Arithmetic Expr=Concept:Arithmetic Subs==
        Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
        Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
        Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
        Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
        Concept=Comparable Expr=Concept:Comparable Subs==
        Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
        Function: Equals(Concept:Comparable a, Concept:Comparable b)
        Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
        Function: LessThan(Concept:Comparable a, Concept:Comparable b)
        Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: Lesser(Concept:Comparable a, Concept:Comparable b)
        Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Coordinate Expr=Concept:Coordinate Subs==
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Vector3D
  Concept=Vector Expr=Concept:Vector Subs==
  Function: Aggregate(Concept:Vector v, ConcreteType:Function2<ConcreteType:Number,TypeVariable:$T,TypeVariable:$T> f)
  Function: Sum(Concept:Vector v)
  Function: SumSquares(Concept:Vector v)
  Function: MagnitudeSquared(Concept:Vector v)
  Function: Magnitude(Concept:Vector v)
  Function: Dot(Concept:Vector v1, Concept:Vector v2)
  Function: Normal(Concept:Vector v)
  Function: Average(Concept:Vector v)
    Concept=Array Expr=Concept:Array<ConcreteType:Number> Subs=T_391:TypeVariable=ConcreteType:Number=
    Concept=Numerical Expr=Concept:Numerical Subs==
    Function: Square(Concept:Numerical x)
    Function: PlusOne(Concept:Numerical x)
    Function: MinusOne(Concept:Numerical x)
    Function: FromOne(Concept:Numerical x)
    Function: IsPositive(Concept:Numerical x)
    Function: GtZ(Concept:Numerical x)
    Function: LtZ(Concept:Numerical x)
    Function: GtEqZ(Concept:Numerical x)
    Function: LtEqZ(Concept:Numerical x)
    Function: IsNegative(Concept:Numerical x)
    Function: Sign(Concept:Numerical x)
    Function: Abs(Concept:Numerical x)
    Function: Half(Concept:Numerical x)
    Function: Quarter(Concept:Numerical x)
    Function: Eighth(Concept:Numerical x)
    Function: Tenth(Concept:Numerical x)
    Function: Twice(Concept:Numerical x)
    Function: SmoothStep(Concept:Numerical x)
    Function: Pow2(Concept:Numerical x)
    Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
      Concept=Value Expr=Concept:Value Subs==
        Concept=Any Expr=Concept:Any Subs==
        Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Arithmetic Expr=Concept:Arithmetic Subs==
        Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
        Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
        Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
        Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
        Concept=Comparable Expr=Concept:Comparable Subs==
        Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
        Function: Equals(Concept:Comparable a, Concept:Comparable b)
        Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
        Function: LessThan(Concept:Comparable a, Concept:Comparable b)
        Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: Lesser(Concept:Comparable a, Concept:Comparable b)
        Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Coordinate Expr=Concept:Coordinate Subs==
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Vector4D
  Concept=Vector Expr=Concept:Vector Subs==
  Function: Aggregate(Concept:Vector v, ConcreteType:Function2<ConcreteType:Number,TypeVariable:$T,TypeVariable:$T> f)
  Function: Sum(Concept:Vector v)
  Function: SumSquares(Concept:Vector v)
  Function: MagnitudeSquared(Concept:Vector v)
  Function: Magnitude(Concept:Vector v)
  Function: Dot(Concept:Vector v1, Concept:Vector v2)
  Function: Normal(Concept:Vector v)
  Function: Average(Concept:Vector v)
    Concept=Array Expr=Concept:Array<ConcreteType:Number> Subs=T_391:TypeVariable=ConcreteType:Number=
    Concept=Numerical Expr=Concept:Numerical Subs==
    Function: Square(Concept:Numerical x)
    Function: PlusOne(Concept:Numerical x)
    Function: MinusOne(Concept:Numerical x)
    Function: FromOne(Concept:Numerical x)
    Function: IsPositive(Concept:Numerical x)
    Function: GtZ(Concept:Numerical x)
    Function: LtZ(Concept:Numerical x)
    Function: GtEqZ(Concept:Numerical x)
    Function: LtEqZ(Concept:Numerical x)
    Function: IsNegative(Concept:Numerical x)
    Function: Sign(Concept:Numerical x)
    Function: Abs(Concept:Numerical x)
    Function: Half(Concept:Numerical x)
    Function: Quarter(Concept:Numerical x)
    Function: Eighth(Concept:Numerical x)
    Function: Tenth(Concept:Numerical x)
    Function: Twice(Concept:Numerical x)
    Function: SmoothStep(Concept:Numerical x)
    Function: Pow2(Concept:Numerical x)
    Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
      Concept=Value Expr=Concept:Value Subs==
        Concept=Any Expr=Concept:Any Subs==
        Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Arithmetic Expr=Concept:Arithmetic Subs==
        Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
        Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
        Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
        Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
        Concept=Comparable Expr=Concept:Comparable Subs==
        Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
        Function: Equals(Concept:Comparable a, Concept:Comparable b)
        Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
        Function: LessThan(Concept:Comparable a, Concept:Comparable b)
        Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: Lesser(Concept:Comparable a, Concept:Comparable b)
        Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Coordinate Expr=Concept:Coordinate Subs==
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Orientation3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Pose2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Pose3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Transform3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Transform2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for AlignedBox2D
  Concept=Interval Expr=Concept:Interval<ConcreteType:Point2D,ConcreteType:Vector2D> Subs=TSize_461:TypeVariable=ConcreteType:Vector2DTValue_460:TypeVariable=ConcreteType:Point2D=
  Function: IsEmpty(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Lerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number amount)
  Function: Unlerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Negate(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Reverse(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Center(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> other)
  Function: Overlaps(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: SplitAt(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Split(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Left(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Right(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: MoveTo(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value v)
  Function: LeftHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: RightHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Recenter(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value c)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Within(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
Type analysis for AlignedBox3D
  Concept=Interval Expr=Concept:Interval<ConcreteType:Point3D,ConcreteType:Vector3D> Subs=TSize_461:TypeVariable=ConcreteType:Vector3DTValue_460:TypeVariable=ConcreteType:Point3D=
  Function: IsEmpty(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Lerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number amount)
  Function: Unlerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Negate(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Reverse(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Center(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> other)
  Function: Overlaps(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: SplitAt(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Split(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Left(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Right(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: MoveTo(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value v)
  Function: LeftHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: RightHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Recenter(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value c)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Within(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
Type analysis for Complex
  Concept=Vector Expr=Concept:Vector Subs==
  Function: Aggregate(Concept:Vector v, ConcreteType:Function2<ConcreteType:Number,TypeVariable:$T,TypeVariable:$T> f)
  Function: Sum(Concept:Vector v)
  Function: SumSquares(Concept:Vector v)
  Function: MagnitudeSquared(Concept:Vector v)
  Function: Magnitude(Concept:Vector v)
  Function: Dot(Concept:Vector v1, Concept:Vector v2)
  Function: Normal(Concept:Vector v)
  Function: Average(Concept:Vector v)
    Concept=Array Expr=Concept:Array<ConcreteType:Number> Subs=T_391:TypeVariable=ConcreteType:Number=
    Concept=Numerical Expr=Concept:Numerical Subs==
    Function: Square(Concept:Numerical x)
    Function: PlusOne(Concept:Numerical x)
    Function: MinusOne(Concept:Numerical x)
    Function: FromOne(Concept:Numerical x)
    Function: IsPositive(Concept:Numerical x)
    Function: GtZ(Concept:Numerical x)
    Function: LtZ(Concept:Numerical x)
    Function: GtEqZ(Concept:Numerical x)
    Function: LtEqZ(Concept:Numerical x)
    Function: IsNegative(Concept:Numerical x)
    Function: Sign(Concept:Numerical x)
    Function: Abs(Concept:Numerical x)
    Function: Half(Concept:Numerical x)
    Function: Quarter(Concept:Numerical x)
    Function: Eighth(Concept:Numerical x)
    Function: Tenth(Concept:Numerical x)
    Function: Twice(Concept:Numerical x)
    Function: SmoothStep(Concept:Numerical x)
    Function: Pow2(Concept:Numerical x)
    Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
      Concept=Value Expr=Concept:Value Subs==
        Concept=Any Expr=Concept:Any Subs==
        Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Arithmetic Expr=Concept:Arithmetic Subs==
        Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
        Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
        Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
        Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
        Concept=Comparable Expr=Concept:Comparable Subs==
        Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
        Function: Equals(Concept:Comparable a, Concept:Comparable b)
        Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
        Function: LessThan(Concept:Comparable a, Concept:Comparable b)
        Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: Lesser(Concept:Comparable a, Concept:Comparable b)
        Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Coordinate Expr=Concept:Coordinate Subs==
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Ray3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Ray2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Sphere
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Plane
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Triangle2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Triangle3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Quad2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Quad3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Point2D
  Concept=Coordinate Expr=Concept:Coordinate Subs==
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Point3D
  Concept=Coordinate Expr=Concept:Coordinate Subs==
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Line2D
  Concept=Interval Expr=Concept:Interval<ConcreteType:Point2D,ConcreteType:Vector3D> Subs=TSize_461:TypeVariable=ConcreteType:Vector3DTValue_460:TypeVariable=ConcreteType:Point2D=
  Function: IsEmpty(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Lerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number amount)
  Function: Unlerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Negate(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Reverse(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Center(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> other)
  Function: Overlaps(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: SplitAt(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Split(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Left(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Right(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: MoveTo(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value v)
  Function: LeftHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: RightHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Recenter(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value c)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Within(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
Type analysis for Line3D
  Concept=Interval Expr=Concept:Interval<ConcreteType:Point3D,ConcreteType:Vector3D> Subs=TSize_461:TypeVariable=ConcreteType:Vector3DTValue_460:TypeVariable=ConcreteType:Point3D=
  Function: IsEmpty(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Lerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number amount)
  Function: Unlerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Negate(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Reverse(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Center(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> other)
  Function: Overlaps(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: SplitAt(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Split(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Left(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Right(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: MoveTo(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value v)
  Function: LeftHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: RightHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Recenter(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value c)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Within(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
Type analysis for Color
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for ColorLUV
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for ColorLAB
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for ColorLCh
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for ColorHSV
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for ColorHSL
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for ColorYCbCr
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for SphericalCoordinate
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for PolarCoordinate
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for LogPolarCoordinate
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for CylindricalCoordinate
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for HorizontalCoordinate
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for GeoCoordinate
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for GeoCoordinateWithAltitude
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Circle
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Chord
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Size2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Size3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Rectangle2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Proportion
  Concept=Numerical Expr=Concept:Numerical Subs==
  Function: Square(Concept:Numerical x)
  Function: PlusOne(Concept:Numerical x)
  Function: MinusOne(Concept:Numerical x)
  Function: FromOne(Concept:Numerical x)
  Function: IsPositive(Concept:Numerical x)
  Function: GtZ(Concept:Numerical x)
  Function: LtZ(Concept:Numerical x)
  Function: GtEqZ(Concept:Numerical x)
  Function: LtEqZ(Concept:Numerical x)
  Function: IsNegative(Concept:Numerical x)
  Function: Sign(Concept:Numerical x)
  Function: Abs(Concept:Numerical x)
  Function: Half(Concept:Numerical x)
  Function: Quarter(Concept:Numerical x)
  Function: Eighth(Concept:Numerical x)
  Function: Tenth(Concept:Numerical x)
  Function: Twice(Concept:Numerical x)
  Function: SmoothStep(Concept:Numerical x)
  Function: Pow2(Concept:Numerical x)
  Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Arithmetic Expr=Concept:Arithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
      Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
      Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Fraction
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Angle
  Concept=Coordinate Expr=Concept:Coordinate Subs==
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
  Function: Cos(ConcreteType:Angle x)
  Function: Sin(ConcreteType:Angle x)
  Function: Tan(ConcreteType:Angle x)
  Function: Degrees(ConcreteType:Angle x)
  Function: Turns(ConcreteType:Angle x)
Type analysis for Length
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Mass
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Temperature
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Time
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for TimeRange
  Concept=Interval Expr=Concept:Interval<ConcreteType:DateTime,ConcreteType:Time> Subs=TSize_461:TypeVariable=ConcreteType:TimeTValue_460:TypeVariable=ConcreteType:DateTime=
  Function: IsEmpty(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Lerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number amount)
  Function: Unlerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Negate(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Reverse(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Center(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> other)
  Function: Overlaps(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: SplitAt(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Split(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Left(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Right(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: MoveTo(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value v)
  Function: LeftHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: RightHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Recenter(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value c)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Within(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
Type analysis for DateTime
  Concept=Coordinate Expr=Concept:Coordinate Subs==
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for AnglePair
  Concept=Interval Expr=Concept:Interval<ConcreteType:Angle,ConcreteType:Angle> Subs=TSize_461:TypeVariable=ConcreteType:AngleTValue_460:TypeVariable=ConcreteType:Angle=
  Function: IsEmpty(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Lerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number amount)
  Function: Unlerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Negate(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Reverse(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Center(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> other)
  Function: Overlaps(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: SplitAt(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Split(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Left(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Right(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: MoveTo(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value v)
  Function: LeftHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: RightHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Recenter(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value c)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Within(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
Type analysis for Ring
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Arc
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for RealInterval
  Concept=Interval Expr=Concept:Interval<ConcreteType:Number,ConcreteType:Number> Subs=TSize_461:TypeVariable=ConcreteType:NumberTValue_460:TypeVariable=ConcreteType:Number=
  Function: IsEmpty(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Lerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number amount)
  Function: Unlerp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Negate(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Reverse(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Center(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Contains(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> other)
  Function: Overlaps(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: SplitAt(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Split(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Left(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: Right(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, ConcreteType:Number t)
  Function: MoveTo(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value v)
  Function: LeftHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: RightHalf(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x)
  Function: Recenter(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value c)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> y)
  Function: Clamp(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
  Function: Within(Concept:Interval<TypeVariable:$Value,TypeVariable:$Size> x, TypeVariable:$Value value)
Type analysis for Capsule
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Matrix3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Cylinder
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Cone
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Tube
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for ConeSegment
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Box2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Box3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for UV
  Concept=Vector Expr=Concept:Vector Subs==
  Function: Aggregate(Concept:Vector v, ConcreteType:Function2<ConcreteType:Number,TypeVariable:$T,TypeVariable:$T> f)
  Function: Sum(Concept:Vector v)
  Function: SumSquares(Concept:Vector v)
  Function: MagnitudeSquared(Concept:Vector v)
  Function: Magnitude(Concept:Vector v)
  Function: Dot(Concept:Vector v1, Concept:Vector v2)
  Function: Normal(Concept:Vector v)
  Function: Average(Concept:Vector v)
    Concept=Array Expr=Concept:Array<ConcreteType:Number> Subs=T_391:TypeVariable=ConcreteType:Number=
    Concept=Numerical Expr=Concept:Numerical Subs==
    Function: Square(Concept:Numerical x)
    Function: PlusOne(Concept:Numerical x)
    Function: MinusOne(Concept:Numerical x)
    Function: FromOne(Concept:Numerical x)
    Function: IsPositive(Concept:Numerical x)
    Function: GtZ(Concept:Numerical x)
    Function: LtZ(Concept:Numerical x)
    Function: GtEqZ(Concept:Numerical x)
    Function: LtEqZ(Concept:Numerical x)
    Function: IsNegative(Concept:Numerical x)
    Function: Sign(Concept:Numerical x)
    Function: Abs(Concept:Numerical x)
    Function: Half(Concept:Numerical x)
    Function: Quarter(Concept:Numerical x)
    Function: Eighth(Concept:Numerical x)
    Function: Tenth(Concept:Numerical x)
    Function: Twice(Concept:Numerical x)
    Function: SmoothStep(Concept:Numerical x)
    Function: Pow2(Concept:Numerical x)
    Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
      Concept=Value Expr=Concept:Value Subs==
        Concept=Any Expr=Concept:Any Subs==
        Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Arithmetic Expr=Concept:Arithmetic Subs==
        Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
        Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
        Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
        Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
        Concept=Comparable Expr=Concept:Comparable Subs==
        Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
        Function: Equals(Concept:Comparable a, Concept:Comparable b)
        Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
        Function: LessThan(Concept:Comparable a, Concept:Comparable b)
        Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: Lesser(Concept:Comparable a, Concept:Comparable b)
        Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Coordinate Expr=Concept:Coordinate Subs==
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for UVW
  Concept=Vector Expr=Concept:Vector Subs==
  Function: Aggregate(Concept:Vector v, ConcreteType:Function2<ConcreteType:Number,TypeVariable:$T,TypeVariable:$T> f)
  Function: Sum(Concept:Vector v)
  Function: SumSquares(Concept:Vector v)
  Function: MagnitudeSquared(Concept:Vector v)
  Function: Magnitude(Concept:Vector v)
  Function: Dot(Concept:Vector v1, Concept:Vector v2)
  Function: Normal(Concept:Vector v)
  Function: Average(Concept:Vector v)
    Concept=Array Expr=Concept:Array<ConcreteType:Number> Subs=T_391:TypeVariable=ConcreteType:Number=
    Concept=Numerical Expr=Concept:Numerical Subs==
    Function: Square(Concept:Numerical x)
    Function: PlusOne(Concept:Numerical x)
    Function: MinusOne(Concept:Numerical x)
    Function: FromOne(Concept:Numerical x)
    Function: IsPositive(Concept:Numerical x)
    Function: GtZ(Concept:Numerical x)
    Function: LtZ(Concept:Numerical x)
    Function: GtEqZ(Concept:Numerical x)
    Function: LtEqZ(Concept:Numerical x)
    Function: IsNegative(Concept:Numerical x)
    Function: Sign(Concept:Numerical x)
    Function: Abs(Concept:Numerical x)
    Function: Half(Concept:Numerical x)
    Function: Quarter(Concept:Numerical x)
    Function: Eighth(Concept:Numerical x)
    Function: Tenth(Concept:Numerical x)
    Function: Twice(Concept:Numerical x)
    Function: SmoothStep(Concept:Numerical x)
    Function: Pow2(Concept:Numerical x)
    Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
      Concept=Value Expr=Concept:Value Subs==
        Concept=Any Expr=Concept:Any Subs==
        Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Arithmetic Expr=Concept:Arithmetic Subs==
        Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
        Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
        Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
        Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
        Concept=Comparable Expr=Concept:Comparable Subs==
        Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
        Function: Equals(Concept:Comparable a, Concept:Comparable b)
        Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
        Function: LessThan(Concept:Comparable a, Concept:Comparable b)
        Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
        Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
        Function: Lesser(Concept:Comparable a, Concept:Comparable b)
        Function: Greater(Concept:Comparable a, Concept:Comparable b)
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Coordinate Expr=Concept:Coordinate Subs==
      Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for CubicBezier2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for CubicBezier3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for QuadraticBezier2D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for QuadraticBezier3D
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Area
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Volume
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Velocity
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Acceleration
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Force
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Pressure
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Energy
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Memory
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Frequency
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Loudness
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for LuminousIntensity
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for ElectricPotential
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for ElectricCharge
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for ElectricCurrent
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for ElectricResistance
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Power
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for Density
  Concept=Measure Expr=Concept:Measure Subs==
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=ScalarArithmetic Expr=Concept:ScalarArithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<ConcreteType:Number> Subs=T_442:TypeVariable=ConcreteType:Number=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<ConcreteType:Number> Subs=T_447:TypeVariable=ConcreteType:Number=
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for NormalDistribution
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for PoissonDistribution
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for BernoulliDistribution
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Probability
  Concept=Numerical Expr=Concept:Numerical Subs==
  Function: Square(Concept:Numerical x)
  Function: PlusOne(Concept:Numerical x)
  Function: MinusOne(Concept:Numerical x)
  Function: FromOne(Concept:Numerical x)
  Function: IsPositive(Concept:Numerical x)
  Function: GtZ(Concept:Numerical x)
  Function: LtZ(Concept:Numerical x)
  Function: GtEqZ(Concept:Numerical x)
  Function: LtEqZ(Concept:Numerical x)
  Function: IsNegative(Concept:Numerical x)
  Function: Sign(Concept:Numerical x)
  Function: Abs(Concept:Numerical x)
  Function: Half(Concept:Numerical x)
  Function: Quarter(Concept:Numerical x)
  Function: Eighth(Concept:Numerical x)
  Function: Tenth(Concept:Numerical x)
  Function: Twice(Concept:Numerical x)
  Function: SmoothStep(Concept:Numerical x)
  Function: Pow2(Concept:Numerical x)
  Function: Lerp(Concept:Numerical a, Concept:Numerical b, ConcreteType:Number t)
    Concept=Value Expr=Concept:Value Subs==
      Concept=Any Expr=Concept:Any Subs==
      Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Arithmetic Expr=Concept:Arithmetic Subs==
      Concept=AdditiveArithmetic Expr=Concept:AdditiveArithmetic<TypeVariable:Self> Subs=T_442:TypeVariable=TypeVariable:Self=
      Concept=MultiplicativeArithmetic Expr=Concept:MultiplicativeArithmetic<TypeVariable:Self> Subs=T_447:TypeVariable=TypeVariable:Self=
      Concept=AdditiveInverse Expr=Concept:AdditiveInverse Subs==
      Concept=MultiplicativeInverse Expr=Concept:MultiplicativeInverse Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
    Concept=Comparable Expr=Concept:Comparable Subs==
    Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
    Function: Equals(Concept:Comparable a, Concept:Comparable b)
    Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
    Function: LessThan(Concept:Comparable a, Concept:Comparable b)
    Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
    Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
    Function: Lesser(Concept:Comparable a, Concept:Comparable b)
    Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Magnitudinal Expr=Concept:Magnitudinal Subs==
      Concept=Comparable Expr=Concept:Comparable Subs==
      Function: Between(Concept:Comparable self, Concept:Comparable min, Concept:Comparable max)
      Function: Equals(Concept:Comparable a, Concept:Comparable b)
      Function: NotEquals(Concept:Comparable a, Concept:Comparable b)
      Function: LessThan(Concept:Comparable a, Concept:Comparable b)
      Function: LessThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThan(Concept:Comparable a, Concept:Comparable b)
      Function: GreaterThanOrEquals(Concept:Comparable a, Concept:Comparable b)
      Function: Lesser(Concept:Comparable a, Concept:Comparable b)
      Function: Greater(Concept:Comparable a, Concept:Comparable b)
    Concept=Interpolatable Expr=Concept:Interpolatable Subs==
Type analysis for BinomialDistribution
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Array1
  Concept=Array Expr=Concept:Array<TypeVariable:T> Subs=T_391:TypeVariable=TypeVariable:T=
Type analysis for Tuple2
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Tuple3
  Concept=Value Expr=Concept:Value Subs==
    Concept=Any Expr=Concept:Any Subs==
    Concept=Equatable Expr=Concept:Equatable Subs==
Type analysis for Function0
Type analysis for Function1
Type analysis for Function2
Type analysis for Function3
