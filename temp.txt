Function group call unresolved: no functions 11

Square(FieldValues(x)) with ((Array, Any)) has 0 possible return types 

All(xs, (\(ParameterDefinition=b$4718:ConcreteType:Boolean) -> Primitive:Function) with ((Array, $80:Any), (Function, Boolean)) has 0 possible return types 
* This should work, I'd like to try.

Sum(Square(FieldValues(x))) with () has 0 possible return types 
SquareRoot(Sum(Square(FieldValues(x)))) with () has 0 possible return types 

At(xs, Subtract(Count(xs), 1)) with ((Array, $73:Any), Number) has 0 possible return types 
Aggregate(Rest(xs), , (\(ParameterDefinition=acc$4662:ConcreteType:String, ParameterDefinition=cur$4664:Concept:Any) -> Primitive:Function) with ((Array, $70:Any), String, (Function, String, Any)) has 0 possible return types 
Add(ToString(First(xs)), Aggregate(Rest(xs), , (\(ParameterDefinition=acc$4662:ConcreteType:String, ParameterDefinition=cur$4664:Concept:Any) -> Primitive:Function)) with (String, ) has 0 possible return types 

Half(Size(x)) with (Numerical) has 0 possible return types 
* This is because of Numerical library only operating on Number.

Square(v) with ((Array, $116:Any)) has 0 possible return types 
* Should I support array vectorization yet? 

Sum(Square(v)) with () has 0 possible return types 
* This fails because of the previous

Zip(FieldValues(self), FieldValues(min), FieldValues(max), (\(ParameterDefinition=x$5738:ConcreteType:Number, ParameterDefinition=y$5740:ConcreteType:Number, ParameterDefinition=z$5742:ConcreteType:Number) -> Primitive:Function) with ((Array, Any), (Array, Any), (Array, Any), (Function, Number, Number, Number)) has 0 possible return types 

Function group call unresolved: ambiguous 11
Add(FieldValues(self), scalar) with ((Array, Any), Number) has 2 possible return types Arithmetic, ScalarArithmetic
Multiply(FieldValues(self), scalar) with ((Array, Any), Number) has 2 possible return types Arithmetic, ScalarArithmetic
Subtract(Count, n) with (Function, Integer) has 2 possible return types Arithmetic, ScalarArithmetic
Modulo(FieldValues(self), scalar) with ((Array, Any), Number) has 2 possible return types Arithmetic, ScalarArithmetic

Multiply(t, b) with (Unit, Number) has 2 possible return types Arithmetic, ScalarArithmetic
* Similar problem below, this makes no sense. 

Clamp(x, Tuple(0, 1)) with (Number, (Tuple, Integer, Integer)) has 2 possible return types (Interval, $112:Numerical), Numerical
Clamp(x, y) with ((Interval, $93:Numerical), (Interval, $94:Numerical)) has 2 possible return types (Interval, $112:Numerical), Numerical

Divide(v, Length(v)) with ((Vector, $121:Numerical), Number) has 2 possible return types Arithmetic, ScalarArithmetic
* This definitely shouldn't be Arithmetic, an arithmetic function would require the second argument to be the same as the first.
* Maybe it works because of a cast? 

Subtract(One(x), x) with (Numerical, Number) has 2 possible return types Arithmetic, ScalarArithmetic
* The "Numerical" needs to be what is returned.
* I need a "GetReturn" function 

Divide(Pi, 180) with (Function, Integer) has 2 possible return types Arithmetic, ScalarArithmetic
* What is Pi, and how is called?
Add(easeOut(Multiply(p, Subtract(2, 1))), 0.5) with ($135:Any, Number) has 2 possible return types Arithmetic, ScalarArithmetic
* Why does easeOut return Any?
* Maybe it is a parameter? 

[0:00.581] Outputting errors and warnings
