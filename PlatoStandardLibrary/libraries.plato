library Interval
{
    IsEmpty(x: Interval<$Value, $Size>): Boolean 
        => x.Min >= x.Max;
    
    Lerp(x: Interval<$Value, $Size>, amount: Number): $Value
        => x.Min.Lerp(x.Max, amount);
    
    Unlerp(x: Interval<$Value, $Size>, value: $Value): Number
        => value.Unlerp(x.Min, x.Max);
    
    Reverse(x: Interval<$Value, $Size>): Interval<$Value, $Size> 
        => (x.Max, x.Min);
        
    Center(x: Interval<$Value, $Size>): $Value
        => x.Lerp(0.5);    
    
    Contains(x: Interval<$Value, $Size>, value: $Value): Boolean 
        => x.Min <= value && value <= x.Max;
    
    Contains(x: Interval<$Value, $Size>, other: Interval<$Value, $Size>): Boolean 
        => x.Min <= other.Min && x.Max >= other.Max;
    
    Overlaps(x: Interval<$Value, $Size>, y: Interval<$Value, $Size>): Boolean 
        => !x.Clamp(y).IsEmpty;
    
    SplitAt(x: Interval<$Value, $Size>, t: Number): Tuple2<Interval<$Value, $Size>, Interval<$Value, $Size>> 
        => (x.Left(t), x.Right(t));
    
    Split(x: Interval<$Value, $Size>): Tuple2<Interval<$Value, $Size>, Interval<$Value, $Size>>
        => x.SplitAt(0.5);

    Left(x: Interval<$Value, $Size>, t: Number): Interval<$Value, $Size>
        => (x.Min, x.Lerp(t));
    
    Right(x: Interval<$Value, $Size>, t: Number): Interval<$Value, $Size>
        => (x.Lerp(t), x.Max);

    MoveTo(x: Interval<$Value, $Size>, v: $Value): Interval<$Value, $Size>
        => (v, v + x.Size);
    
    LeftHalf(x: Interval<$Value, $Size>): Interval<$Value, $Size> 
        => x.Left(0.5);
    
    RightHalf(x: Interval<$Value, $Size>): Interval<$Value, $Size> 
        => x.Right(0.5);
    
    Recenter(x: Interval<$Value, $Size>, c: $Value): Interval<$Value, $Size> 
        => (c - x.Size.Half, c + x.Size.Half);
    
    Clamp(x: Interval<$Value, $Size>, y: Interval<$Value, $Size>): Interval<$Value, $Size>
        => (x.Clamp(y.Min), x.Clamp(y.Max));
    
    Clamp(x: Interval<$Value, $Size>, value: $Value): $Value
        => x.Min.Lerp(x.Max, value.Unlerp(x.Min, x.Max).ClampOne);
    
    Within(x: Interval<$Value, $Size>, value: $Value): Boolean
        => value >= x.Min && value <= x.Max;
}

library Vector
{
    Sum(v: Vector): Number 
    {
        var r = 0.0;
        for (var i = 0; i < v.Count; i = i + 1)
            r = r + v[i];
        return r;
    }    
    
    SumSquares(v: Vector): Number
        => v.Square.Sum; 
    
    MagnitudeSquared(v: Vector): Number
        => v.SumSquares;
    
    Magnitude(v: Vector): Number
        => v.MagnitudeSquared.SquareRoot;
    
    Dot(v1: Vector, v2: Vector): Number
        => (v1 * v2).Sum;

    Normal(v: Vector): Vector
        => v / v.Magnitude;

    Average(v: Vector): Number
        => v.Sum / v.Count;
}

library Numerical
{
    SquareRoot(x: Number): Number 
        => x.Pow(0.5);

    SmoothStep(x: Number): Number
        => x.Square * (3.0 - x.Twice);    

    Square(x: Numerical): Numerical 
        => x * x;

    ClampOne(x: Number): Number 
        => Clamp(x, 0.0, 1.0);

    PlusOne(x: Numerical): Numerical 
        => x + x.One;

    MinusOne(x: Numerical): Numerical
        => x - x.One;
    
    FromOne(x: Numerical): Numerical 
        => x.One - x;

    IsPositive(x: Numerical): Boolean
        => x.GtEqZ;

    GtZ(x : Numerical): Boolean
        => x > x.Zero;

    LtZ(x : Numerical): Boolean
        => x < x.Zero;

    GtEqZ(x : Numerical): Boolean
        => x >= x.Zero;

    LtEqZ(x : Numerical): Boolean
        => x <= x.Zero;

    IsNegative(x: Numerical): Boolean
        => x < x.Zero;

    Sign(x: Numerical): Numerical 
        => x.LtZ ? -x.One : x.GtZ ? x.One : x.Zero;
    
    Abs(x: Numerical): Numerical 
        => x.LtZ ? -x: x;
    
    Half(x: MultiplicativeArithmetic<Number>): MultiplicativeArithmetic<Number>
        => x / 2.0;
        
    Quarter(x: MultiplicativeArithmetic<Number>): MultiplicativeArithmetic<Number>
        => x / 4.0;
    
    Eighth(x: MultiplicativeArithmetic<Number>): MultiplicativeArithmetic<Number>
        => x / 8.0;
        
    Tenth(x: MultiplicativeArithmetic<Number>): MultiplicativeArithmetic<Number> 
        => x / 10.0;
    
    Twice(x: MultiplicativeArithmetic<Number>): MultiplicativeArithmetic<Number> 
        => x * 2.0;
    
    Pow2(x: Numerical): Numerical
        => x * x;

    TwoPi(): Number 
        => Pi.Twice;
    
    Pi(): Number 
        => 3.1415926535897;

    Epsilon(): Number
        => 1E-15;

    MultiplyEpsilon(x: Numerical, y: Numerical): Numerical
        => x.Abs.Greater(y.Abs) * Epsilon;

    // https://stackoverflow.com/a/2411661
    AlmostEqual(x: Numerical, y: Numerical): Boolean
        => (x-y).Abs <= x.MultiplyEpsilon(y);

    AlmostZero(x: Number): Boolean
        => x.Abs < Epsilon; 

    Lerp(a: Numerical, b: Numerical, t: Number): Numerical
        => a * t.FromOne + b * t;
        
    Between(self: Comparable, min: Comparable, max: Comparable): Boolean
        => self >= min && self <= max;
}

library Angles 
{
    Radians(x : Number): Angle
        => x;

    Degrees(x: Number): Angle
        => (x / 360).Turns; 
        
    Turns(x: Number): Angle 
        => x * TwoPi;    

    Degrees(x: Angle): Number
        => x.Turns * 360;

    Turns(x: Angle): Number
        => x / TwoPi;    
}

library Comparable
{
    Clamp(v: Comparable, a: Comparable, b: Comparable): Comparable
        => v.Greater(a).Lesser(b);

    Equals(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) == 0;
    
    NotEquals(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) != 0;
    
    LessThan(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) < 0;
    
    LessThanOrEquals(a: Comparable, b: Comparable): Boolean
        => a.Compare(b) <= 0;
    
    GreaterThan(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) > 0;
    
    GreaterThanOrEquals(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) >= 0;
       
    Lesser(a: Comparable, b: Comparable): Comparable 
        => a <= b ? a : b;
    
    Greater(a: Comparable, b: Comparable): Comparable 
        => a >= b ? a : b;
}

library Measures
{
    Fahrenheit(x: Temperature): Number
        => (x.Celsius * 9.0 / 5.0) + 32.0;

    Fahrenheit(x: Number): Temperature
        => (x - 32.0) * 5.0 / 9.0;

    Kelvin(x: Temperature): Number
        => x.Celsius + 273.15;

    Kelvin(x: Number): Temperature
        => x - 273.15;

    Multiply(x: Length, y: Length): Area
        => x.Value * y.Value;

    Divide(x: Area, y: Length): Length
        => x.Value / y.Value;

    Multiply(x: Area, y: Length): Volume
        => x.Value * y.Value;

    Multiply(x: Length, y: Area): Volume
        => x.Value * y.Value;

    Divide(x: Volume, y: Length): Area
        => x.Value / y.Value;

    Divide(x: Volume, y: Area): Length
        => x.Value / y.Value;

    Multiply(x: Length, y: Time): Velocity
        => x.Value * y.Value;

    Multiply(x: Time, y: Length): Velocity
        => x.Value * y.Value;

    Divide(x: Velocity, y: Time): Length
        => x.Value / y.Value;

    Divide(x: Velocity, y: Length): Time
        => x.Value / y.Value;

    Multiply(x: Velocity, y: Time): Acceleration
        => x.Value * y.Value;

    Divide(x: Acceleration, y: Time): Velocity
        => x.Value / y.Value;

    Divide(x: Acceleration, y: Velocity): Time
        => x.Value / y.Value;

    Multiply(x: Mass, y: Acceleration): Force
        => x.Value * y.Value;

    Days(x: Number): Time
        => x * 86400.0;

    Milliseconds(x: Number): Time
        => (x / 1000.0).Seconds;

    Seconds(x: Number): Time
        => x;

    Minutes(x: Number): Time
        => (x * 60.0).Seconds;

    Hours(x: Number): Time
        => (x * 60).Minutes;

    Days(x: Time): Number
        => (x * 24.0).Hours;

    Milliseconds(x: Time): Number
        => x.Seconds * 1000.0;

    Minutes(x: Time): Number
        => x.Seconds / 60.0;

    Hours(x: Time): Number
        => x.Minutes / 60.0;

    Days(x: Time): Number
        => x.Hours / 24.0;
}
