library Interval
{
    IsEmpty(x: Interval<$Value, $Size>): Boolean 
        => x.Min >= x.Max;
    
    Lerp(x: Interval<$Value, $Size>, amount: Number): $Value
        => x.Min.Lerp(x.Max, amount);
    
    Unlerp(x: Interval<$Value, $Size>, value: $Value): Number
        => (value - x.Min) / x.Size;
    
    Negate(x: Interval<$Value, $Size>): Interval<$Value, $Size> 
        => (-x.Max, -x.Min);
    
    Reverse(x: Interval<$Value, $Size>): Interval<$Value, $Size> 
        => (x.Max, x.Min);
        
    Center(x: Interval<$Value, $Size>): $Value
        => x.Lerp(0.5);    
    
    Contains(x: Interval<$Value, $Size>, value: $Value): Boolean 
        => x.Min <= value && value <= x.Max;
    
    Contains(x: Interval<$Value, $Size>, other: Interval<$Value, $Size>): Boolean 
        => x.Min <= other.Min && x.Max >= other.Max;
    
    Overlaps(x: Interval<$Value, $Size>, y: Interval<$Value, $Size>): Boolean 
        => !x.Clamp(y).IsEmpty;
    
    Split(x: Interval<$Value, $Size>, t: Number): Tuple2<Interval<$Value, $Size>, Interval<$Value, $Size>> 
        => (x.Left(t), x.Right(t));
    
    Split(x: Interval<$Value, $Size>): Tuple2<Interval<$Value, $Size>, Interval<$Value, $Size>>
        => x.Split(0.5);

    Left(x: Interval<$Value, $Size>, t: Number): Interval<$Value, $Size>
        => (x.Min, x.Lerp(t));
    
    Right(x: Interval<$Value, $Size>, t: Number): Interval<$Value, $Size>
        => (x.Lerp(t), x.Max);

    MoveTo(x: Interval<$Value, $Size>, v: $Value): Interval<$Value, $Size>
        => (v, v + x.Size);
    
    LeftHalf(x: Interval<$Value, $Size>): Interval<$Value, $Size> 
        => x.Left(0.5);
    
    RightHalf(x: Interval<$Value, $Size>): Interval<$Value, $Size> 
        => x.Right(0.5);
    
    HalfSize(x: Interval<$Value, $Size>): $Size
        => x.Size.Half;
    
    Recenter(x: Interval<$Value, $Size>, c: $Value): Interval<$Value, $Size> 
        => (c - x.HalfSize, c + x.HalfSize);
    
    Clamp(x: Interval<$Value, $Size>, y: Interval<$Value, $Size>): Interval<$Value, $Size>
        => (x.Clamp(y.Min), x.Clamp(y.Max));
    
    Clamp(x: Interval<$Value, $Size>, value: $Value): $Value
        => value.Lerp(x.Min, x.Max, value.Unlerp(x.Min, x.Max).Clamp(0, 1));
    
    Within(x: Interval<$Value, $Size>, value: $Value): Boolean
        => value >= x.Min && value <= x.Max;
}

library Vector
{
    Aggregate(v: Vector, f: Function2<Number, $T, $T>): $T
    {
        var r = v[0];
        for (var i=1; i < v.Count; ++i)
            r = f(r, v[i]);
        return r;
    }    

    Sum(v: Vector): Number 
        => v.Aggregate(0, Add); 
    
    SumSquares(v: Vector): Number
        => v.Square.Sum; 
    
    MagnitudeSquared(v: Vector): Number
        => v.SumSquares;
    
    Magnitude(v: Vector): Number
        => v.MagnitudeSquared.SquareRoot;
    
    Dot(v1: Vector, v2: Vector): Number
        => (v1 * v2).Sum;

    Normal(v: Vector): Vector
        => v / v.Magnitude;

    Average(v: Vector): Number
        => v.Sum / v.Count;
}

library Numerical
{
    SquareRoot(x: Number): Number 
        => x.Pow(0.5);

    Square(x: Numerical): Numerical 
        => x * x;

    Clamp(x: Number): Number 
        => Clamp(x, (0, 1));

    PlusOne(x: Numerical): Numerical 
        => x + x.One;

    MinusOne(x: Numerical): Numerical
        => x - x.One;
    
    FromOne(x: Numerical): Numerical 
        => x.One - x;

    IsPositive(x: Numerical): Boolean
        => x.GtEqZ;

    GtZ(x : Numerical): Boolean
        => x > x.Zero;

    LtZ(x : Numerical): Boolean
        => x < x.Zero;

    GtEqZ(x : Numerical): Boolean
        => x >= x.Zero;

    LtEqZ(x : Numerical): Boolean
        => x <= x.Zero;

    IsNegative(x: Numerical): Boolean
        => x < x.Zero;

    Sign(x: Numerical): Numerical 
        => x.LtZ ? -x.One : x.GtZ ? x.One : x.Zero;
    
    Abs(x: Numerical): Numerical 
        => x.LtZ ? -x: x;
    
    Half(x: Numerical): Numerical 
        => x / 2;
    
    Third(x: Numerical): Numerical 
        => x / 3;
    
    Quarter(x: Numerical): Numerical 
        => x / 4;

    Fifth(x: Numerical): Numerical 
        => x / 5;
    
    Sixth(x: Numerical): Numerical 
        => x / 6;
    
    Seventh(x: Numerical): Numerical 
        => x / 7;
    
    Eighth(x: Numerical): Numerical 
        => x / 8;
    
    Ninth(x: Numerical): Numerical 
        => x / 9;
    
    Tenth(x: Numerical): Numerical 
        => x / 10;
    
    Sixteenth(x: Numerical): Numerical 
        => x / 16;
    
    Hundredth(x: Numerical): Numerical 
        => x / 100;
    
    Thousandth(x: Numerical): Numerical 
        => x / 1000;
    
    Millionth(x: Numerical): Numerical 
        => x / 1000 / 1000;
    
    Billionth(x: Numerical): Numerical 
        => x / 1000 / 1000 / 1000;
    
    Hundred(x: Numerical): Numerical 
        => x * 100;
    
    Thousand(x: Numerical): Numerical
        => x * 1000;
    
    Million(x: Numerical): Numerical
        => x * 1000 * 1000;
    
    Billion(x: Numerical): Numerical 
        => x * 1000 * 1000 * 1000;
    
    Twice(x: Numerical): Numerical 
        => x * 2;
    
    Thrice(x: Numerical): Numerical 
        => x * 3;
    
    SmoothStep(x: Numerical): Numerical 
        => x.Square * (3 - x.Twice);
    
    Pow2(x: Numerical): Numerical 
        => x * x;
    
    Pow3(x: Numerical): Numerical 
        => x.Pow2 * x;

    Pow4(x: Numerical): Numerical 
        => x.Pow3 * x;

    Pow5(x: Numerical): Numerical 
        => x.Pow4 * x;

    Pi(): Number 
        => 3.1415926535897;
    
    AlmostZero(x: Number): Boolean
        => x.Abs < 0.00000001; 

    Lerp(a: Numerical, b: Numerical, t: Number): Number
        => (a.One - t) * a + t * b;
        
    Between(self: Comparable, min: Comparable, max: Comparable): Boolean
        => self >= min && self <= max;
}

library Angles 
{
    Radians(x : Number): Angle
        => x;

    Degrees(x: Number): Angle
        => x * Pi / 180; 
        
    Turns(x: Number): Angle 
        => x * 2 * Pi;    
}

library Comparable
{
    Equals(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) == 0;
    
    LessThan(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) < 0;
    
    LessThanOrEquals(a: Comparable, b: Comparable): Boolean
        => a.Compare(b) <= 0;
    
    GreaterThan(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) > 0;
    
    GreaterThanOrEquals(a: Comparable, b: Comparable): Boolean 
        => a.Compare(b) >= 0;
    
    Between(v: Comparable, a: Comparable, b: Comparable): Value 
        => v >= a && v <= b;
    
    Min(a: Comparable, b: Comparable): Comparable 
        => a <= b ? a : b;
    
    Max(a: Comparable, b: Comparable): Comparable 
        => a >= b ? a : b;
}