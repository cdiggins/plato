library Numerical
{
    Pi(): Number 
        => 3.1415926535897;
    
    TwoPi(): Number 
        => Pi.Twice;
    
    HalfPi(): Number 
        => Pi.Half;

    Epsilon(): Number 
        => 1E-15;
    
    FeetPerMeter(): Number 
        => 3.280839895;
    
    FeetPerMile(): Number 
        => 5280;
    
    MetersPerLightyear(): Number 
        => 9.46073047258e+15;
    
    MetersPerAU(): Number 
        => 149597870691.0;
    
    DaltonPerKilogram(): Number 
        => 1.66053e-27;
    
    PoundPerKilogram(): Number 
        => 0.45359237;
    
    PoundPerTon(): Number 
        => 2000;
    
    KilogramPerSolarMass(): Number 
        => 1.9889200011446E+30;
    
    JulianYearSeconds(): Number 
        => 31557600;
    
    GregorianYearDays(): Number 
        => 365.2425;
    
    Hundred(x: Number): Number 
        => x * 100;  
    
    Thousand(x: Number): Number 
        => x * 1000;
    
    Million(x: Number): Number 
        => x.Thousand.Thousand;
    
    Billion(x: Number): Number 
        => x.Thousand.Million;
        
    OunceToGram(x: Number): Number 
        => x * 28.349523125;
    
    TroyOunceToGram(x: Number): Number 
        => x * 31.1034768;
    
    GrainToMilligram(x: Number): Number 
        => x * 64.79891;    
    
    Mole(x: Number): Number 
        => x * 6.02214076e+23;

    Magnitude(x: Real): Number
        => x.Value;

    Inverse(x: Number): Number
        => 1.0 / x;

    Reciprocal(x: Number): Number
        => x.Inverse;

    SquareRoot(x: Number): Number 
        => x.Pow(0.5);

    Sqrt(x: Number): Number
        => x.SquareRoot;

    SmoothStep(x: Number): Number
        => x.Square * (3.0 - x.Twice);    

    Pow2(x: Arithmetic): Arithmetic 
        => x * x;

    Pow3(x: Arithmetic): Arithmetic 
        => x.Pow2 * x;

    Pow4(x: Arithmetic): Arithmetic 
        => x.Pow3 * x;

    Pow5(x: Arithmetic): Arithmetic 
        => x.Pow4 * x;

    Square(x: Arithmetic): Arithmetic 
        => x.Pow2;

    ClampOne(x: Real): Real
        => x.Clamp(x.Zero, x.One);

    PlusOne(x: Numerical): Numerical 
        => x + x.One;

    MinusOne(x: Numerical): Numerical
        => x - x.One;
    
    FromOne(x: Numerical): Numerical 
        => x.One - x;

    GtZ(x : Real): Boolean
        => x > x.Zero;

    LtZ(x : Real): Boolean
        => x < x.Zero;

    GtEqZ(x : Real): Boolean
        => x >= x.Zero;

    LtEqZ(x : Real): Boolean
        => x <= x.Zero;

    IsPositive(x: Real): Boolean
        => x.GtEqZ;

    IsNegative(x: Real): Boolean
        => x.LtZ;

    Sign(x: Real): Integer
        => x.LtZ ? -1 : x.GtZ ? 1 : 0;

    Abs(x: Real): Real 
        => x.LtZ ? -x: x;
    
    Half(x: ScalarArithmetic): ScalarArithmetic
        => x / 2.0;
        
    Quarter(x: ScalarArithmetic): ScalarArithmetic
        => x / 4.0;
    
    Tenth(x: ScalarArithmetic): ScalarArithmetic 
        => x / 10.0;
    
    Twice(x: ScalarArithmetic): ScalarArithmetic 
        => x * 2.0;
    
    MultiplyEpsilon(x: Number, y: Number): Number
        => x.Abs.Greater(y.Abs) * Epsilon;

    // https://stackoverflow.com/a/2411661
    AlmostEqual(x: Number, y: Number): Boolean
        => (x-y).Abs <= x.MultiplyEpsilon(y);

    AlmostZero(x: Number): Boolean
        => x.Abs < Epsilon;

    AlmostZeroOrOne(x: Number): Boolean
        => AlmostEqual(x, 0) || AlmostEqual(x, 1);

    Lerp(a: ScalarArithmetic, b: ScalarArithmetic, t: Number): ScalarArithmetic
        => a * t.FromOne + b * t;
          
    Between(self: Comparable, min: Comparable, max: Comparable): Boolean
        => self >= min && self <= max;

    InverseLerp(a: Number, b: Number, v: Number): Number
        => (v - a) / (b - a);

    Remap(aIn: Number, bIn: Number, aOut: Number, bOut: Number, v: Number): Number
        => aOut.Lerp(bOut, aIn.InverseLerp(aOut, v));

    M11(m: Matrix3D): Number => m.Column1.X;
    M12(m: Matrix3D): Number => m.Column2.X;
    M13(m: Matrix3D): Number => m.Column3.X;
    M14(m: Matrix3D): Number => m.Column4.X;
    M21(m: Matrix3D): Number => m.Column1.Y;
    M22(m: Matrix3D): Number => m.Column2.Y;
    M23(m: Matrix3D): Number => m.Column3.Y;
    M24(m: Matrix3D): Number => m.Column4.Y;
    M31(m: Matrix3D): Number => m.Column1.Z;
    M32(m: Matrix3D): Number => m.Column2.Z;
    M33(m: Matrix3D): Number => m.Column3.Z;
    M34(m: Matrix3D): Number => m.Column4.Z;
    M41(m: Matrix3D): Number => m.Column1.W;
    M42(m: Matrix3D): Number => m.Column2.W;
    M43(m: Matrix3D): Number => m.Column3.W;
    M44(m: Matrix3D): Number => m.Column4.W;

    Multiply(m: Matrix3D, v: Vector3D): Vector3D
        =>  (v.X * m.M11 + v.Y * m.M21 + v.Z * m.M31 + m.M41,
            v.X * m.M12 + v.Y * m.M22 + v.Z * m.M32 + m.M42,
            v.X * m.M13 + v.Y * m.M23 + v.Z * m.M33 + m.M43);
}
