
library Vector
{
    Sum(v: Vector): Number 
    {
        var r = 0.0;
        for (var i = 0; i < v.Count; i = i + 1)
            r = r + v[i];
        return r;
    }    

    Count(v: UV): Integer
        => 2;
   
    Count(v: UVW): Integer
        => 3;
   
    Count(c: Complex): Integer
        => 2;
   
    Count(v: Vector2D): Integer
        => 2;

    Count(v: Vector3D): Integer
        => 3;
    
    Count(v: Vector4D): Integer
        => 4;

    At(v: UV, n: Integer): Unit
        => n == 0 ? v.U : v.V;
   
    At(v: UVW, n: Integer): Unit
        => n == 0 ? v.U : n == 1 ? v.V : v.W;   
   
    At(c: Complex, n: Integer): Number
        => n == 0 ? c.Real : c.Imaginary;

    At(v: Vector2D, n: Integer): Number
        => n == 0 ? v.X : v.Y;

    At(v: Vector3D, n: Integer): Number
        => n == 0 ? v.X : n == 1 ? v.Y : v.Z;

    At(v: Vector4D, n: Integer): Number
        => n == 0 ? v.X : n == 1 ? v.Y : n == 2 ? v.Z : v.W;

    SumSquares(v: Vector): Number
        => v.Square.Sum; 
    
    MagnitudeSquared(v: Vector): Number
        => v.SumSquares;
    
    Magnitude(v: Vector): Number
        => v.MagnitudeSquared.SquareRoot;
    
    Dot(v1: Vector, v2: Vector): Number
        => (v1 * v2).Sum;

    Normal(v: Vector): Vector
        => v / v.Magnitude;

    Average(v: Vector): Number
        => v.Sum / v.Count;

    // TODO: the following seems like boilerplate that should be generated by the compiler.

    Subtract(a: Point2D, b: Point2D): Vector2D
        => (a.X - b.X, a.Y - b.Y);

    Subtract(a: Point3D, b: Point3D): Vector3D
        => (a.X - b.X, a.Y - b.Y, a.Z - b.Z);

    Subtract(a: Point4D, b: Point4D): Vector4D
        => (a.X - b.X, a.Y - b.Y, a.Z - b.Z, a.W - b.W);

    Subtract(a: Point2D, b: Vector2D): Point2D
        => (a.X - b.X, a.Y - b.Y);

    Subtract(a: Point3D, b: Vector3D): Point3D
        => (a.X - b.X, a.Y - b.Y, a.Z - b.Z);

    Subtract(a: Point4D, b: Vector4D): Point4D
        => (a.X - b.X, a.Y - b.Y, a.Z - b.Z, a.W - b.W);

    Add(a: Point2D, b: Vector2D): Point2D
        => (a.X + b.X, a.Y + b.Y);

    Add(a: Point3D, b: Vector3D): Point3D
        => (a.X + b.X, a.Y + b.Y, a.Z + b.Z);

    Add(a: Point4D, b: Vector4D): Point4D
        => (a.X + b.X, a.Y + b.Y, a.Z + b.Z, a.W + b.W);
}