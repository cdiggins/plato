//# 2D Shapes

type Point2D
    implements Coordinate, Difference<Vector2D>
{
    X: Number;
    Y: Number;
}

type Transform2D
    implements Value
{
    Translation: Vector2D;
    Rotation: Angle;
    Scale: Vector2D;
}

type Pose2D
    implements Value
{
    Position: Vector2D;
    Orientation: Angle;
}

// Axis-Aligned bounding box 
type Bounds2D
    implements Interval<Point2D, Vector2D>
{
    Min: Point2D;
    Max: Point2D;
}

type Ray2D
    implements Value
{
    Direction: Vector2D;
    Position: Point2D;
}

type Sphere
    implements Value
{
    Center: Point3D;
    Radius: Number;
}

type Plane
    implements Value
{
    Normal: Vector3D;
    D: Number;
}

type Triangle2D
    implements Value, Points2D
{
    A: Point2D;
    B: Point2D;
    C: Point2D;
}

type Quad2D
    implements Value, Array<Point2D>
{
    A: Point2D;
    B: Point2D;
    C: Point2D;
    D: Point2D;
}

type Line2D
    implements PolygonalChain2D, Array<Point2D>
{
    A: Point2D;
    B: Point2D;
}

type Circle
    implements ClosedShape2D
{
    Center: Point2D;
    Radius: Number;
}

// https://en.wikipedia.org/wiki/Lens_(geometry)
type Lens
    implements ClosedShape2D
{
    A: Circle;
    B: Circle;
}

type PolygonFace
{
    FaceIndex: Integer;
    PointIndices: Array<Integer>;
}

type Rectangle
    implements Polygon2D
{
    Center: Point2D;
    Size: Size2D;
}

type Ring
    implements ClosedShape2D
{
    Center: Point2D;
    InnerRadius: Number;
    OuterRadius: Number;
}

type Arc
    implements OpenShape2D
{
    Angles: AnglePair;
    Circle: Circle;
}

type Sector
    implements ClosedShape2D
{
    Arc: Arc;
}

type Chord
    implements ClosedShape2D
{
    Arc: Arc;
}

type Segment
    implements ClosedShape2D
{
    Arc: Arc;
}

type RegularPolygon
    implements Polygon2D
{
    NumPoints: Integer;
}

type Box2D
    implements Shape2D
{
    Center: Point2D;
    Rotation: Angle;
    Extent: Size2D;
}

//# 3D Shapes

type Point3D
    implements Coordinate, Difference<Vector3D>
{
    X: Number;
    Y: Number;
    Z: Number;
}

type Transform3D
    implements Value
{
    Translation: Vector3D;
    Rotation: Rotation3D;
    Scale: Vector3D;
}

type Pose3D
    implements Value
{
    Position: Vector3D;
    Orientation: Orientation3D;
}

type Frame3D
{
    Forward: Vector3D;
    Up: Vector3D;
    Right: Vector3D;
}


// Axis-Aligned bounding box 
type Bounds3D
    implements Interval<Point3D, Vector3D>
{
    Min: Point3D;
    Max: Point3D;
}

type Line3D
    implements PolygonalChain3D
{
    A: Point3D;
    B: Point3D;
}

type Ray3D
    implements Value
{
    Direction: Vector3D;
    Position: Point3D;
}

type Triangle3D
    implements Value, Array<Point3D>
{
    A: Point3D;
    B: Point3D;
    C: Point3D;
}

type Quad3D
    implements Value, Array<Point3D>
{
    A: Point3D;
    B: Point3D;
    C: Point3D;
    D: Point3D;
}

type Capsule
    implements Shape3D
{
    Line: Line3D;
    Radius: Number;
}

type Cylinder
    implements Shape3D
{
    Line: Line3D;
    Radius: Number;
}

type Cone
    implements Shape3D
{
    Line: Line3D;
    Radius: Number;
}

type Tube
    implements Shape3D
{
    Line: Line3D;
    InnerRadius: Number;
    OuterRadius: Number;
}

type ConeSegment
    implements Shape3D
{
    Line: Line3D;
    Radius1: Number;
    Radius2: Number;
}

type Box3D
    implements Shape3D
{
    Center: Point3D;
    Rotation: Rotation3D;
    Extent: Size3D;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve    
type CubicBezier2D
    implements Points2D
{
    A: Point2D;
    B: Point2D;
    C: Point2D;
    D: Point2D;
}   

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type CubicBezier3D
    implements Points3D
{
    A: Point3D;
    B: Point3D;
    C: Point3D;
    D: Point3D;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type QuadraticBezier2D
    implements Points2D
{
    A: Point2D;
    B: Point2D;
    C: Point2D;
}

// https://en.wikipedia.org/wiki/B%C3%A9zier_curve
type QuadraticBezier3D
    implements Points3D
{
    A: Point3D;
    B: Point3D;
    C: Point3D;
}

//# 3D Rotation 

type Quaternion
    implements Vector
{
    X: Number;
    Y: Number;
    Z: Number;
    W: Number;
}

type AxisAngle
    implements Value
{
    Axis: Vector3D;
    Angle: Angle;
}

type EulerAngles
    implements Value
{
    Yaw: Angle;
    Pitch: Angle;
    Roll: Angle;
}

type Rotation3D
    implements Value
{
    Quaternion: Quaternion;
}

type Orientation3D
    implements Value
{
    Value: Rotation3D;
}

//# 4D Shapes 

type Point4D
    implements Coordinate, Difference<Vector4D>
{
    X: Number;
    Y: Number;
    Z: Number;
    W: Number;
}

type Line4D
    implements Value
{
    A: Point4D;
    B: Point4D;
}

type Quadray
    implements Vector
{
    X: Number;
    Y: Number;
    Z: Number;
    W: Number;
}
