
library Vector
{  
    Sum(v: Vector): Number 
        => v.Reduce(0.0, (a, b) => a + b);

    Count(v: UV): Integer
        => 2;
   
    Count(v: UVW): Integer
        => 3;
   
    Count(c: Complex): Integer
        => 2;
   
    Count(v: Vector2D): Integer
        => 2;

    Count(v: Vector3D): Integer
        => 3;
    
    Count(v: Vector4D): Integer
        => 4;

    At(v: UV, n: Integer): Number
        => n == 0 ? v.U : v.V;
   
    At(v: UVW, n: Integer): Number
        => n == 0 ? v.U : n == 1 ? v.V : v.W;       
   
    At(c: Complex, n: Integer): Number
        => n == 0 ? c.Real : c.Imaginary;

    At(v: Vector2D, n: Integer): Number
        => n == 0 ? v.X : v.Y;

    At(v: Vector3D, n: Integer): Number
        => n == 0 ? v.X : n == 1 ? v.Y : v.Z;

    At(v: Vector4D, n: Integer): Number
        => n == 0 ? v.X : n == 1 ? v.Y : n == 2 ? v.Z : v.W;

    SumSquares(v: Vector): Number
        => v.Square.Sum; 
    
    MagnitudeSquared(v: Vector): Number
        => v.SumSquares;
    
    Magnitude(v: Vector): Number
        => v.MagnitudeSquared.SquareRoot;
    
    Dot(v1: Vector, v2: Vector): Number
        => (v1 * v2).Sum;

    Normal(v: Vector): Vector
        => v / v.Magnitude;

    Average(v: Vector): Number
        => v.Sum / v.Count;
}