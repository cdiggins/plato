
concept Interval<T: Numerical>
    inherits Vector<T>
{
    field Min: T;
    field Max: T;  
}

concept Vector<T: Numerical> 
    inherits Array, Value, Numerical, Arithmetic<T>
{
}

concept Measure
    inherits Value, Additive<Self>, Arithemetic<Number>, Equatable, Comparable
{ 
    field Value: Number;
}

concept Numerical 
    inherits Equatable, Comparable, Arithmetic<Self>
{
    function FromNumber(x: Number): Self;
}

concept Arithemtic<T>
    inherits Multiplicative<T>, Additive<T>
{ 
}

concept Comparable
{
    function Compare(a: Self, b: Self): Integer;
}

concept Equatable
{
    function Equals(a: Self, b: Self): Boolean
}

concept Additive<T>
{
    function Add(x: Self, y: T): Self;
    function Subtract(x: Self, y: T): Self;
    function Negative(x: Self): Self;
}

concept Multiplicative<T>
{
    function Multiply(x: Self, y: T): Self;
    function Divide(x: Self, y: T): Self;
    function Modulo(x: Self, y: T): Self;
    function Reciprocal(x: Self): Self;
}

concept Array<T>
{
    field Count: Count;    
    function At(n: Index): T;
}

concept Value 
    inherits Array<Any>
{
    function Type(): Type;
    function Fields(): Array<(String, Type)>;
    function FieldValue(x: Value, n: Index): Value;

    function Zero(): Self;
    function One(): Self;
    function Default(): Self;
    function MinValue(): Self;
    function MaxValue(): Self;

    function ToString(x: Self): String;
    function FromString(s: String): Self;
}
