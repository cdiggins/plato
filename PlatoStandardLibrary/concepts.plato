
concept Interval<T: Numerical>
    inherits Vector<T>
{
    field Min: T;
    field Max: T;  
}

concept Vector<T: Numerical> 
    inherits Array<T>, Value, Numerical, Arithmetic<T>
{
}

concept Measure
    inherits Value, ScalarArithemetic<Number>, Equatable, Comparable, Magnitude
{ 
    field Value: Number;
}

concept Numerical 
    inherits Value, Arithmetic, Equatable, Comparable, Magnitude
{
    function FromNumber(x: Number): Self
        = Values.FromNumber(x);
}

concept Magnitude
    inherits Value
{
    function Magnitude(x: Self): Number
        = x.FieldValues.Square.Sum.SquareRoot;
}

concept Comparable
    inherits Value
{
    function Compare(a: Self, b: Self): Integer
        = a.Magnitude < b.Magnitude ? -1 : a.Magnitude > b.Magnitude ? 1 : 0;
}

concept Equatable
    inherits Value
{
    function Equals(a: Self, b: Self): Boolean
        = a.FieldValues.Equals(b.FieldValues).All;
}

concept Arithmetic
    inherits Value
{ 
    function Add(self: Self, other: Self): Self
        = self.FieldValues.Add(other.FieldValues);

    function Negative(self: Self): Self
        = self.FieldValues.Negative;

    function Reciprocal(self: Self): Self
        = self.FieldValues.Reciprocal;
    
    function Multiply(self: Self, other: Self): Self
        = self.FieldValues.Add(other.FieldValues);

    function Divide(self: Self, other: Self): Self
        = self.FieldValues.Divide(other.FieldValues);

    function Modulo(self: Self, other: Self): Self
        = self.FieldValues.Modulo(other.FieldValues);
}

concept ScalarArithmetic<T>
    inherits Value
{
    function Add(self: Self, scalar: T): Self
        = self.FieldValues.Add(scalar);
    
    function Subtract(self: Self, scalar: T): Self
        = self.Add(scalar.Negative);

    function Multiply(self: Self, scalar: T): Self
        = self.FieldValues.Multiply(scalar);
    
    function Divide(self: Self, scalar: T): Self
        = self.Multiply(scalar.Reciprocal);

    function Modulo(self: Self, scalar: T): Self
        = self.FieldValues.Modulo(scalar);
}

concept Value 
{
    function Type(): Type
        = intrinsic;

    function FieldTypes(): Array<Type>
        = intrinsic;

    function FieldNames(): Array<String>
        = intrinsic;

    function FieldValues(self: Self): Array<Value>
        = intrinsic;

    function Zero(): Self
        = Types.Zero;

    function One(): Self
        = Types.One;

    function Default(): Self
        = Types.Default;

    function MinValue(): Self
        = Types.MinValue;

    function MaxValue(): Self
        = Types.MaxValue;

    function ToString(x: Self): String
        = Values.JoinString(",");
}

concept Array<T: Any>
{
    field Count: Count;    
    function At(n: Index): T;
}
