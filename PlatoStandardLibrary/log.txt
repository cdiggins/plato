[0:00.001] Creating compiler
[0:00.002] Opening files
[0:00.104] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\intrinsics.plato at 2023-10-04 4:02:50 PM
[0:00.104] Starting to parse 38 lines containing 1086 characters
[0:00.104] Tokenization phase
[0:00.107] Completed tokenization
[0:00.108] Starting main parse
[0:00.110] Completed parsing
[0:00.110] Gathering parse errors
[0:00.110] Found 0 errors
[0:00.110] Gathering parse nodes
[0:00.110] Found 782 nodes
[0:00.110] Creating parse tree
[0:00.111] Creating Concrete Syntax Tree (CST)
[0:00.116] Creating Abstract Syntax Tree (AST)
[0:00.123] Completed all steps, result is successful
[0:00.150] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\concepts.plato at 2023-10-04 4:02:51 PM
[0:00.150] Starting to parse 124 lines containing 2566 characters
[0:00.150] Tokenization phase
[0:00.151] Completed tokenization
[0:00.151] Starting main parse
[0:00.166] Completed parsing
[0:00.166] Gathering parse errors
[0:00.166] Found 0 errors
[0:00.166] Gathering parse nodes
[0:00.166] Found 1358 nodes
[0:00.166] Creating parse tree
[0:00.167] Creating Concrete Syntax Tree (CST)
[0:00.168] Creating Abstract Syntax Tree (AST)
[0:00.197] Completed all steps, result is successful
[0:00.227] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\types.plato at 2023-10-04 4:02:51 PM
[0:00.227] Starting to parse 872 lines containing 12978 characters
[0:00.227] Tokenization phase
[0:00.233] Completed tokenization
[0:00.233] Starting main parse
[0:00.242] Completed parsing
[0:00.242] Gathering parse errors
[0:00.242] Found 0 errors
[0:00.242] Gathering parse nodes
[0:00.242] Found 3800 nodes
[0:00.242] Creating parse tree
[0:00.243] Creating Concrete Syntax Tree (CST)
[0:00.244] Creating Abstract Syntax Tree (AST)
[0:00.247] Completed all steps, result is successful
[0:00.275] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\libraries.plato at 2023-10-04 4:02:51 PM
[0:00.275] Starting to parse 442 lines containing 11214 characters
[0:00.275] Tokenization phase
[0:00.285] Completed tokenization
[0:00.285] Starting main parse
[0:00.298] Completed parsing
[0:00.298] Gathering parse errors
[0:00.298] Found 0 errors
[0:00.298] Gathering parse nodes
[0:00.298] Found 6283 nodes
[0:00.298] Creating parse tree
[0:00.299] Creating Concrete Syntax Tree (CST)
[0:00.306] Creating Abstract Syntax Tree (AST)
[0:00.323] Completed all steps, result is successful
[0:00.323] Applying syntax coloring
[0:00.323] Completed syntax coloring
[0:00.334] Initializing Compiler
[0:00.335] Gathering parsers
[0:00.335] Gathering AST trees
[0:00.335] Gathering type declarations
[0:00.343] Creating symbol resolver
[0:00.345] Creating type definitions
[0:00.352] Found 0 symbol resolution errors
[0:00.352] Gathering function definitions
[0:00.352] Found 428 functions
[0:00.352] Checking semantics
[0:00.352] Creating Reified Types
[0:00.368] Found 117 types
[0:00.369] Created a total of 1465 reified functions
[0:00.369] Adding library functions to reified types
[0:00.422] Grouping Reified functions by name for faster type resolution
[0:00.425] Creating function analysis
[0:00.444] Creating function analysesGathering constraints for each function
Function group call unresolved: no functions
One(x) has 0 possible return types 
One(x) has 0 possible return types 
One(x) has 0 possible return types 
One(x) has 0 possible return types 
One(x) has 0 possible return types 
Zero(x) has 0 possible return types 
Function group call unresolved: ambiguous
Add(FieldValues(self), scalar) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(FieldValues(self), FieldValues(other)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(FieldValues(self), FieldValues(other)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(FieldValues(self), scalar) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, x) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Min(x) has 2 possible return types $6, DateTime
Max(x) has 2 possible return types $7, DateTime
Negative(FieldValues(self)) has 3 possible return types Number, Integer, (Arithmetic)
Negative(self) has 3 possible return types Number, Integer, (Arithmetic)
Add(self, Negative(self)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Negative(scalar) has 3 possible return types Number, Integer, (Arithmetic)
Add(self, Negative(scalar)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(Count, n) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
And(FieldValues(a), FieldValues(b)) has 2 possible return types Boolean, (BooleanOperations)
And(f(First(xs)), f(Rest(xs))) has 2 possible return types Boolean, (BooleanOperations)
Multiply(self, Reciprocal(scalar)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(FieldValues(self), FieldValues(other)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Modulo(FieldValues(self), scalar) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Modulo(FieldValues(self), FieldValues(other)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Or(FieldValues(a), FieldValues(b)) has 2 possible return types Boolean, (BooleanOperations)
Not(FieldValues(a)) has 2 possible return types Boolean, (BooleanOperations)
Subtract(Count(xs), 1) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(ToString(First(xs)), Aggregate(Rest(xs), , (\(ParameterDefinition=acc$3211:ConcreteType:String, ParameterDefinition=cur$3213:Concept:Any) -> Primitive:Function)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Max(x) has 2 possible return types $7, DateTime
Min(x) has 2 possible return types $6, DateTime
Subtract(Max(x), Min(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Min(x) has 2 possible return types $6, DateTime
Subtract(1, amount) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Max(x) has 2 possible return types $7, DateTime
Multiply(Max(x), amount) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(Subtract(1, amount), Multiply(Max(x), amount)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(Min(x), Add(Subtract(1, amount), Multiply(Max(x), amount))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Min(x) has 2 possible return types $6, DateTime
Subtract(value, Min(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Size(x) has 2 possible return types Size2D, $103
Divide(Subtract(value, Min(x)), Size(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Max(x) has 2 possible return types $7, DateTime
Negative(Max(x)) has 3 possible return types Number, Integer, (Arithmetic)
Min(x) has 2 possible return types $6, DateTime
Negative(Min(x)) has 3 possible return types Number, Integer, (Arithmetic)
Max(x) has 2 possible return types $7, DateTime
Min(x) has 2 possible return types $6, DateTime
Subtract(1, t) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(t, b) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(a, Multiply(t, b)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(Subtract(1, t), Add(a, Multiply(t, b))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Min(x) has 2 possible return types $6, DateTime
Max(x) has 2 possible return types $7, DateTime
And(value, LessThanOrEquals(value, Max(x))) has 2 possible return types Boolean, (BooleanOperations)
Min(x) has 2 possible return types $6, DateTime
Min(other) has 2 possible return types $6, DateTime
Max(other) has 2 possible return types $7, DateTime
And(Min(other), GreaterThanOrEquals(Max, Max(other))) has 2 possible return types Boolean, (BooleanOperations)
Min(y) has 2 possible return types $6, DateTime
Min(x) has 2 possible return types $6, DateTime
Min(x) has 2 possible return types $6, DateTime
Max(x) has 2 possible return types $7, DateTime
Max(x) has 2 possible return types $7, DateTime
Clamp(x, Tuple(0, 1)) has 2 possible return types $171, $176
Clamp(x, Min(y)) has 2 possible return types $171, $176
Max(y) has 2 possible return types $7, DateTime
Clamp(x, Max(y)) has 2 possible return types $171, $176
Clamp(x, y) has 2 possible return types $171, $176
Not(IsEmpty(Clamp(x, y))) has 2 possible return types Boolean, (BooleanOperations)
Min(x) has 2 possible return types $6, DateTime
Max(x) has 2 possible return types $7, DateTime
Size(x) has 2 possible return types Size2D, $103
Add(v, Size(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Size(x) has 2 possible return types Size2D, $103
Divide(x, 2) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(c, HalfSize(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(c, HalfSize(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Min(x) has 2 possible return types $6, DateTime
Max(x) has 2 possible return types $7, DateTime
And(Min(x), LessThanOrEquals(value, Max(x))) has 2 possible return types Boolean, (BooleanOperations)
Multiply(v1, v2) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(v, Length(v)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(x, One(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(x, One(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(One(x), x) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Negative(One(x)) has 3 possible return types Number, Integer, (Arithmetic)
Negative(x) has 3 possible return types Number, Integer, (Arithmetic)
Divide(x, 3) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 4) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 5) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 6) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 7) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 8) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 9) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 10) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 16) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 100) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, 1000) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(1000, 1000) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, Divide(1000, 1000)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(1000, 1000) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(1000, Divide(1000, 1000)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(x, Divide(1000, Divide(1000, 1000))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, 100) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, 1000) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(1000, 1000) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, Multiply(1000, 1000)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(1000, 1000) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(1000, Multiply(1000, 1000)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, Multiply(1000, Multiply(1000, 1000))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, 2) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, 3) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(3, Twice(x)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(Square(x), Subtract(3, Twice(x))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, x) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(Pow2(x), x) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(Pow3(x), x) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(Pow4(x), x) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(Pi, 180) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, Divide(Pi, 180)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(2, Pi) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(x, Multiply(2, Pi)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
And(a, LessThanOrEquals(v, b)) has 2 possible return types Boolean, (BooleanOperations)
Not(Equals(x, y)) has 2 possible return types Boolean, (BooleanOperations)
Multiply(p, 2) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(0.5, easeIn(Multiply(p, 2))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(2, 1) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(p, Subtract(2, 1)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(easeOut(Multiply(p, Subtract(2, 1))), 0.5) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(0.5, Add(easeOut(Multiply(p, Subtract(2, 1))), 0.5)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(1, p) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(1, easeIn(Subtract(1, p))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(10, MinusOne(p)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(10, MinusOne(p)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Radians(Pow(2, Multiply(10, MinusOne(p)))) has 2 possible return types Number, Angle
Multiply(Turns(Quarter(p)), Sin(Radians(Pow(2, Multiply(10, MinusOne(p)))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(13, Multiply(Turns(Quarter(p)), Sin(Radians(Pow(2, Multiply(10, MinusOne(p))))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(p, Sin(Turns(Half(p)))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(Pow3(p), Multiply(p, Sin(Turns(Half(p))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(4, 11) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(Pow2(p), 16) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(121, Divide(Pow2(p), 16)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(8, 11) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(17, 5) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(p, Divide(17, 5)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(10, Add(p, Divide(17, 5))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(99, Multiply(10, Add(p, Divide(17, 5)))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(Pow2(p), Divide(99, Multiply(10, Add(p, Divide(17, 5))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(40, Subtract(Pow2(p), Divide(99, Multiply(10, Add(p, Divide(17, 5)))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(363, Multiply(40, Subtract(Pow2(p), Divide(99, Multiply(10, Add(p, Divide(17, 5))))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(9, 10) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(16061, 1805) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(p, Divide(16061, 1805)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(1805, Add(p, Divide(16061, 1805))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805)))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(Pow2(p), Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(361, Subtract(Pow2(p), Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805)))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(4356, Multiply(361, Subtract(Pow2(p), Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805))))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(268, 25) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Add(p, Divide(268, 25)) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(25, Add(p, Divide(268, 25))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(513, Multiply(25, Add(p, Divide(268, 25)))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Subtract(Pow2(p), Divide(513, Multiply(25, Add(p, Divide(268, 25))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Multiply(5, Subtract(Pow2(p), Divide(513, Multiply(25, Add(p, Divide(268, 25)))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)
Divide(54, Multiply(5, Subtract(Pow2(p), Divide(513, Multiply(25, Add(p, Divide(268, 25))))))) has 4 possible return types Number, Integer, (Arithmetic), (ScalarArithmetic)

[0:00.444] Outputting errors and warnings
