[0:00.000] Creating compiler
[0:00.001] Opening files
[0:00.079] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\intrinsics.plato at 2023-10-13 4:48:23 PM
[0:00.080] Starting to parse 38 lines containing 1086 characters
[0:00.080] Tokenization phase
[0:00.083] Completed tokenization
[0:00.083] Starting main parse
[0:00.085] Completed parsing
[0:00.085] Gathering parse errors
[0:00.085] Found 0 errors
[0:00.085] Gathering parse nodes
[0:00.086] Found 782 nodes
[0:00.086] Creating parse tree
[0:00.086] Creating Concrete Syntax Tree (CST)
[0:00.092] Creating Abstract Syntax Tree (AST)
[0:00.097] Completed all steps, result is successful
[0:00.115] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\concepts.plato at 2023-10-13 4:48:23 PM
[0:00.115] Starting to parse 124 lines containing 2522 characters
[0:00.115] Tokenization phase
[0:00.116] Completed tokenization
[0:00.116] Starting main parse
[0:00.126] Completed parsing
[0:00.126] Gathering parse errors
[0:00.126] Found 0 errors
[0:00.126] Gathering parse nodes
[0:00.126] Found 1320 nodes
[0:00.126] Creating parse tree
[0:00.126] Creating Concrete Syntax Tree (CST)
[0:00.127] Creating Abstract Syntax Tree (AST)
[0:00.135] Completed all steps, result is successful
[0:00.190] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\types.plato at 2023-10-13 4:48:24 PM
[0:00.190] Starting to parse 872 lines containing 12978 characters
[0:00.190] Tokenization phase
[0:00.194] Completed tokenization
[0:00.194] Starting main parse
[0:00.199] Completed parsing
[0:00.199] Gathering parse errors
[0:00.199] Found 0 errors
[0:00.199] Gathering parse nodes
[0:00.199] Found 3800 nodes
[0:00.199] Creating parse tree
[0:00.199] Creating Concrete Syntax Tree (CST)
[0:00.201] Creating Abstract Syntax Tree (AST)
[0:00.202] Completed all steps, result is successful
[0:00.247] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\libraries.plato at 2023-10-13 4:48:24 PM
[0:00.247] Starting to parse 441 lines containing 11321 characters
[0:00.247] Tokenization phase
[0:00.258] Completed tokenization
[0:00.258] Starting main parse
[0:00.278] Completed parsing
[0:00.278] Gathering parse errors
[0:00.282] Parsing Error at Parse state: line 47 column 17 position 1354/11321 node = Node Expression:1348-1354:xs.All. Expected rule EOS ::= (';'+WS), parent state is Parse state: line 47 column 8 position 1345/11321 node = Node TypeAnnotation:1326-1345:: Boolean 
        , message is 
[0:00.283]         => xs.All((b: Boolean) => b);
[0:00.283]                  ^
[0:00.283] Found 1 errors
[0:00.283] Gathering parse nodes
[0:00.283] Found 6167 nodes
[0:00.283] Creating parse tree
[0:00.285] Creating Concrete Syntax Tree (CST)
[0:00.291] Creating Abstract Syntax Tree (AST)
[0:00.308] Completed all steps, result was not successful
[0:00.308] Applying syntax coloring
[0:00.308] Completed syntax coloring
[0:00.319] Initializing Compiler
[0:00.319] Gathering parsers
[0:00.320] Parsing was not successful
[0:00.320] Gathering AST trees
[0:00.320] Gathering type declarations
[0:00.328] Creating symbol resolver
[0:00.332] Creating type definitions
[0:00.362] Found 0 symbol resolution errors
[0:00.363] Gathering function definitions
[0:00.364] Found 724 functions
[0:00.364] Checking semantics
[0:00.364] Creating Reified Types
[0:00.386] Found 117 types
[0:00.386] Created a total of 1465 reified functions
[0:00.386] Adding library functions to reified types
[0:00.585] Grouping Reified functions by name for faster type resolution
[0:00.590] Creating function analysis
[0:00.619] Creating function analysesGathering constraints for each function
Function group call unresolved: no functions 0
Function group call unresolved: ambiguous 114
Subtract(Count(xs), n) with (Integer, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(Count(xs), 1) with (Integer, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(ToString(First(xs)), Aggregate(Rest(xs), , (\(ParameterDefinition=acc$4665:Concept:Any, ParameterDefinition=cur$4667:Concept:Any) -> Primitive:Function)) with (String, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
And(f(First(xs)), f(Rest(xs))) with ($75:Any, $76:Any) has 2 possible return types Boolean, BooleanOperations
Subtract(Max(x), Min(x)) with ($3:Numerical, $2:Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(1, amount) with (Number, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Max(x), amount) with ($3:Numerical, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(Subtract(1, amount), Multiply(Max(x), amount)) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Min(x), Add(Subtract(1, amount), Multiply(Max(x), amount))) with ($2:Numerical, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(value, Min(x)) with (Any, $2:Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(Subtract(value, Min(x)), Size(x)) with (Number, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Negative(Max(x)) with ($3:Numerical) has 3 possible return types Number, Integer, Arithmetic
Negative(Min(x)) with ($2:Numerical) has 3 possible return types Number, Integer, Arithmetic
Subtract(1, t) with (Integer, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(t, b) with (Any, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(a, Multiply(t, b)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Subtract(1, t), Add(a, Multiply(t, b))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
And(value, LessThanOrEquals(value, Max(x))) with (Any, Boolean) has 2 possible return types Boolean, BooleanOperations
And(Min(other), GreaterThanOrEquals(Max, Max(other))) with ($2:Numerical, Boolean) has 2 possible return types Boolean, BooleanOperations
Clamp(x, Tuple(0, 1)) with (Any, (Tuple, Integer, Integer)) has 2 possible return types (Interval, $56:Numerical), Numerical
Clamp(x, Min(y)) with (Any, $2:Numerical) has 2 possible return types (Interval, $56:Numerical), Numerical
Clamp(x, Max(y)) with (Any, $3:Numerical) has 2 possible return types (Interval, $56:Numerical), Numerical
Clamp(x, y) with (Any, Any) has 2 possible return types (Interval, $56:Numerical), Numerical
Not(IsEmpty(Clamp(x, y))) with (Boolean) has 2 possible return types Boolean, BooleanOperations
Add(v, Size(x)) with (Any, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 2) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(c, HalfSize(x)) with (Any, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(c, HalfSize(x)) with (Any, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
And(Min(x), LessThanOrEquals(value, Max(x))) with ($2:Numerical, Boolean) has 2 possible return types Boolean, BooleanOperations
Multiply(x, x) with (Any, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(v1, v2) with (Any, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(v, Length(v)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(x, One(x)) with (Any, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(x, One(x)) with (Any, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(One(x), x) with (Numerical, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Negative(One(x)) with (Numerical) has 3 possible return types Number, Integer, Arithmetic
Negative(x) with (Any) has 3 possible return types Number, Integer, Arithmetic
Divide(x, 3) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 4) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 5) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 6) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 7) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 8) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 9) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 10) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 16) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 100) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, 1000) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(1000, 1000) with (Integer, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, Divide(1000, 1000)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(1000, 1000) with (Integer, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(1000, Divide(1000, 1000)) with (Integer, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(x, Divide(1000, Divide(1000, 1000))) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, 100) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, 1000) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(1000, 1000) with (Integer, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, Multiply(1000, 1000)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(1000, 1000) with (Integer, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(1000, Multiply(1000, 1000)) with (Integer, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, Multiply(1000, Multiply(1000, 1000))) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, 2) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, 3) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(3, Twice(x)) with (Integer, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Square(x), Subtract(3, Twice(x))) with (Numerical, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, x) with (Any, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Pow2(x), x) with (Numerical, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Pow3(x), x) with (Numerical, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Pow4(x), x) with (Numerical, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(Pi, 180) with (Function, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, Divide(Pi, 180)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(2, Pi) with (Integer, Function) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(x, Multiply(2, Pi)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
And(a, LessThanOrEquals(v, b)) with (Any, Boolean) has 2 possible return types Boolean, BooleanOperations
Not(Equals(x, y)) with (Boolean) has 2 possible return types Boolean, BooleanOperations
Multiply(p, 2) with (Any, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(0.5, easeIn(Multiply(p, 2))) with (Number, $77:Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(2, 1) with (Integer, Integer) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(p, Subtract(2, 1)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(easeOut(Multiply(p, Subtract(2, 1))), 0.5) with ($78:Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(0.5, Add(easeOut(Multiply(p, Subtract(2, 1))), 0.5)) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(1, p) with (Integer, Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(1, easeIn(Subtract(1, p))) with (Integer, $79:Any) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(10, MinusOne(p)) with (Integer, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(10, MinusOne(p)) with (Integer, Numerical) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(Turns(Quarter(p)), Sin(Radians(Pow(2, Multiply(10, MinusOne(p)))))) with (Angle, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(13, Multiply(Turns(Quarter(p)), Sin(Radians(Pow(2, Multiply(10, MinusOne(p))))))) with (Integer, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(p, Sin(Turns(Half(p)))) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(Pow3(p), Multiply(p, Sin(Turns(Half(p))))) with (Numerical, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(4, 11) with (Integer, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(Pow2(p), 16) with (Numerical, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(121, Divide(Pow2(p), 16)) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(8, 11) with (Integer, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(17, 5) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(p, Divide(17, 5)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(10, Add(p, Divide(17, 5))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(99, Multiply(10, Add(p, Divide(17, 5)))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(Pow2(p), Divide(99, Multiply(10, Add(p, Divide(17, 5))))) with (Numerical, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(40, Subtract(Pow2(p), Divide(99, Multiply(10, Add(p, Divide(17, 5)))))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(363, Multiply(40, Subtract(Pow2(p), Divide(99, Multiply(10, Add(p, Divide(17, 5))))))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(9, 10) with (Integer, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(16061, 1805) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(p, Divide(16061, 1805)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(1805, Add(p, Divide(16061, 1805))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805)))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(Pow2(p), Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805))))) with (Numerical, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(361, Subtract(Pow2(p), Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805)))))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(4356, Multiply(361, Subtract(Pow2(p), Divide(35442, Multiply(1805, Add(p, Divide(16061, 1805))))))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(268, 25) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Add(p, Divide(268, 25)) with (Any, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(25, Add(p, Divide(268, 25))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(513, Multiply(25, Add(p, Divide(268, 25)))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Subtract(Pow2(p), Divide(513, Multiply(25, Add(p, Divide(268, 25))))) with (Numerical, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Multiply(5, Subtract(Pow2(p), Divide(513, Multiply(25, Add(p, Divide(268, 25)))))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic
Divide(54, Multiply(5, Subtract(Pow2(p), Divide(513, Multiply(25, Add(p, Divide(268, 25))))))) with (Number, Number) has 4 possible return types Number, Integer, Arithmetic, ScalarArithmetic

[0:00.619] Outputting errors and warnings
