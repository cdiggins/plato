[0:00.001] Creating compiler
[0:00.002] Opening files
[0:00.087] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\intrinsics.plato at 2023-10-10 7:56:34 PM
[0:00.087] Starting to parse 38 lines containing 1086 characters
[0:00.087] Tokenization phase
[0:00.090] Completed tokenization
[0:00.090] Starting main parse
[0:00.092] Completed parsing
[0:00.092] Gathering parse errors
[0:00.093] Found 0 errors
[0:00.093] Gathering parse nodes
[0:00.093] Found 782 nodes
[0:00.093] Creating parse tree
[0:00.093] Creating Concrete Syntax Tree (CST)
[0:00.099] Creating Abstract Syntax Tree (AST)
[0:00.107] Completed all steps, result is successful
[0:00.127] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\concepts.plato at 2023-10-10 7:56:34 PM
[0:00.127] Starting to parse 124 lines containing 2566 characters
[0:00.127] Tokenization phase
[0:00.128] Completed tokenization
[0:00.128] Starting main parse
[0:00.140] Completed parsing
[0:00.140] Gathering parse errors
[0:00.140] Found 0 errors
[0:00.140] Gathering parse nodes
[0:00.140] Found 1358 nodes
[0:00.140] Creating parse tree
[0:00.140] Creating Concrete Syntax Tree (CST)
[0:00.141] Creating Abstract Syntax Tree (AST)
[0:00.150] Completed all steps, result is successful
[0:00.167] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\types.plato at 2023-10-10 7:56:35 PM
[0:00.167] Starting to parse 872 lines containing 12978 characters
[0:00.167] Tokenization phase
[0:00.173] Completed tokenization
[0:00.173] Starting main parse
[0:00.178] Completed parsing
[0:00.178] Gathering parse errors
[0:00.178] Found 0 errors
[0:00.178] Gathering parse nodes
[0:00.179] Found 3800 nodes
[0:00.179] Creating parse tree
[0:00.179] Creating Concrete Syntax Tree (CST)
[0:00.181] Creating Abstract Syntax Tree (AST)
[0:00.183] Completed all steps, result is successful
[0:00.202] Starting compiling C:\Users\cdigg\git\plato\PlatoStandardLibrary\libraries.plato at 2023-10-10 7:56:35 PM
[0:00.202] Starting to parse 442 lines containing 11214 characters
[0:00.202] Tokenization phase
[0:00.211] Completed tokenization
[0:00.212] Starting main parse
[0:00.220] Completed parsing
[0:00.220] Gathering parse errors
[0:00.220] Found 0 errors
[0:00.220] Gathering parse nodes
[0:00.220] Found 6283 nodes
[0:00.220] Creating parse tree
[0:00.221] Creating Concrete Syntax Tree (CST)
[0:00.224] Creating Abstract Syntax Tree (AST)
[0:00.230] Completed all steps, result is successful
[0:00.230] Applying syntax coloring
[0:00.230] Completed syntax coloring
[0:00.241] Initializing Compiler
[0:00.241] Gathering parsers
[0:00.242] Gathering AST trees
[0:00.242] Gathering type declarations
[0:00.255] Creating symbol resolver
[0:00.257] Creating type definitions
[0:00.264] Found 0 symbol resolution errors
[0:00.265] Gathering function definitions
[0:00.265] Found 435 functions
[0:00.265] Checking semantics
[0:00.265] Creating Reified Types
[0:00.283] Found 117 types
[0:00.283] Created a total of 1465 reified functions
[0:00.283] Adding library functions to reified types
[0:00.332] Grouping Reified functions by name for faster type resolution
[0:00.335] Creating function analysis
[0:05.892] Creating function analysesGathering constraints for each function
Function group call unresolved: no functions 15
Square(FieldValues(x)) with ((Array, Any)) has 0 possible return types 
All(xs, (\(ParameterDefinition=b$3288:ConcreteType:Boolean) -> Primitive:Function) with ((Array, $62:Any), (Function, Boolean)) has 0 possible return types 
Sum(Square(FieldValues(x))) with () has 0 possible return types 
SquareRoot(Sum(Square(FieldValues(x)))) with () has 0 possible return types 
At(xs, Subtract(Count(xs), 1)) with ((Array, $55:Any), Number) has 0 possible return types 
Aggregate(Rest(xs), , (\(ParameterDefinition=acc$3232:ConcreteType:String, ParameterDefinition=cur$3234:Concept:Any) -> Primitive:Function) with ((Array, $52:Any), String, (Function, String, Any)) has 0 possible return types 
Add(ToString(First(xs)), Aggregate(Rest(xs), , (\(ParameterDefinition=acc$3232:ConcreteType:String, ParameterDefinition=cur$3234:Concept:Any) -> Primitive:Function)) with (String, ) has 0 possible return types 
Lerp(x, 0.5) with ((Interval, $71:Numerical), Number) has 0 possible return types 
Split(x, 0.5) with ((Interval, $78:Numerical), Number) has 0 possible return types 
Left(x, 0.5) with ((Interval, $85:Numerical), Number) has 0 possible return types 
Right(x, 0.5) with ((Interval, $87:Numerical), Number) has 0 possible return types 
Half(Size(x)) with (Numerical) has 0 possible return types 
Square(v) with ((Array, $98:Any)) has 0 possible return types 
Sum(Square(v)) with () has 0 possible return types 
Zip(FieldValues(self), FieldValues(min), FieldValues(max), (\(ParameterDefinition=x$4308:ConcreteType:Number, ParameterDefinition=y$4310:ConcreteType:Number, ParameterDefinition=z$4312:ConcreteType:Number) -> Primitive:Function) with ((Array, Any), (Array, Any), (Array, Any), (Function, Number, Number, Number)) has 0 possible return types 
Function group call unresolved: ambiguous 11
Add(FieldValues(self), scalar) with ((Array, Any), Number) has 2 possible return types Arithmetic, ScalarArithmetic
Multiply(FieldValues(self), scalar) with ((Array, Any), Number) has 2 possible return types Arithmetic, ScalarArithmetic
Subtract(Count, n) with (Function, Integer) has 2 possible return types Arithmetic, ScalarArithmetic
Modulo(FieldValues(self), scalar) with ((Array, Any), Number) has 2 possible return types Arithmetic, ScalarArithmetic
Multiply(t, b) with (Unit, Number) has 2 possible return types Arithmetic, ScalarArithmetic
Clamp(x, Tuple(0, 1)) with (Number, (Tuple, Integer, Integer)) has 2 possible return types (Interval, $94:Numerical), Numerical
Clamp(x, y) with ((Interval, $75:Numerical), (Interval, $76:Numerical)) has 2 possible return types (Interval, $94:Numerical), Numerical
Divide(v, Length(v)) with ((Vector, $103:Numerical), Number) has 2 possible return types Arithmetic, ScalarArithmetic
Subtract(One(x), x) with (Numerical, Number) has 2 possible return types Arithmetic, ScalarArithmetic
Divide(Pi, 180) with (Function, Integer) has 2 possible return types Arithmetic, ScalarArithmetic
Add(easeOut(Multiply(p, Subtract(2, 1))), 0.5) with ($117:Any, Number) has 2 possible return types Arithmetic, ScalarArithmetic

[0:05.892] Outputting errors and warnings
