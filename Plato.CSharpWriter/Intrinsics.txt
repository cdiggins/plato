    public static partial class Intrinsics
    {
        public static TR Invoke<TR>(this Function0<TR> self) => self._function();
        public static TR Invoke<T0, TR>(this Function1<T0, TR> self, T0 arg) => self._function(arg);
        public static TR Invoke<T0, T1, TR>(this Function2<T0, T1, TR> self, T0 arg0, T1 arg1) => self._function(arg0, arg1);
        public static TR Invoke<T0, T1, T2, TR>(this Function3<T0, T1, T2, TR> self, T0 arg0, T1 arg1, T2 arg2) => self._function(arg0, arg1, arg2);
        public static TR Invoke<T0, T1, T2, T3, TR>(this Function4<T0, T1, T2, T3, TR> self, T0 arg0, T1 arg1, T2 arg2, T3 arg3) => self._function(arg0, arg1, arg2, arg3);

        public static T ChangePrecision<T>(this T self) => self;
        public static float ChangePrecision(this double self) => (float)self;
        public static string ChangePrecision(this string self) => self;

        public static Number MinNumber => {{float}}.MinValue;
        public static Number MaxNumber => {{float}}.MinValue;

        public static Number Cos(Angle x) => ({{float}})System.Math.Cos(x.Radians);
        public static Number Sin(Angle x) => ({{float}})System.Math.Sin(x.Radians);
        public static Number Tan(Angle x) => ({{float}})System.Math.Tan(x.Radians);

        public static Number Ln(Number x) => ({{float}})System.Math.Log(x.Value);
        public static Number Exp(Number x) => ({{float}})System.Math.Exp(x.Value);

        public static Number Floor(Number x) => ({{float}})System.Math.Floor(x.Value);
        public static Number Ceiling(Number x) => ({{float}})System.Math.Ceiling(x.Value);
        public static Number Round(Number x) => ({{float}})System.Math.Round(x.Value);
        public static Number Truncate(Number x) => ({{float}})System.Math.Truncate(x.Value);

        public static Angle Acos(Number x) => new Angle(({{float}})System.Math.Acos(x));
        public static Angle Asin(Number x) => new Angle(({{float}})System.Math.Asin(x));
        public static Angle Atan(Number x) => new Angle(({{float}})System.Math.Atan(x));

        public static Number Pow(Number x, Number y) => ({{float}})System.Math.Pow(x, y);
        public static Number Log(Number x, Number y) => ({{float}})System.Math.Log(x, y);
        public static Number NaturalLog(Number x) => ({{float}})System.Math.Log(x);
        public static Number NaturalPower(Number x) => ({{float}})System.Math.Pow(x, System.Math.E);

        public static Number Add(Number x, Number y) => x.Value + y.Value;
        public static Number Subtract(Number x, Number y) => x.Value - y.Value;
        public static Number Divide(Number x, Number y) => x.Value / y.Value;
        public static Number Multiply(Number x, Number y) => x.Value * y.Value;
        public static Number Modulo(Number x, Number y) => x.Value % y.Value;
        public static Number Negative(Number x) => -x.Value;

        public static Integer Add(Integer x, Integer y) => x.Value + y.Value;
        public static Integer Subtract(Integer x, Integer y) => x.Value - y.Value;
        public static Integer Divide(Integer x, Integer y) => x.Value / y.Value;
        public static Integer Multiply(Integer x, Integer y) => x.Value * y.Value;
        public static Integer Modulo(Integer x, Integer y) => x.Value % y.Value;
        public static Integer Negative(Integer x) => -x.Value;

        // These are the two ways to make an array. 
        public static IArray<T> MapRange<T>(this Integer x, System.Func<Integer, T> f) => new Array<T>(x, f);
        public static IArray<T> MakeArray<T>(params T[] args) => new PrimitiveArray<T>(args);
        
        // This is a built-in implementation
        public static IArray<T1> FlatMap<T0, T1>(IArray<T0> xs, System.Func<T0, IArray<T1>> f) 
        {
            var r = new System.Collections.Generic.List<T1>();
            for (var i=0; i < xs.Count; ++i)
                r.AddRange(f(xs[i]));            
            return new ListArray<T1>(r);
        }

        public static Boolean And(Boolean x, Boolean y) => x.Value && y.Value;
        public static Boolean Or(Boolean x, Boolean y) => x.Value || y.Value;
        public static Boolean Not(Boolean x) => !x.Value;

        public static Number ToNumber(Integer x) => x.Value;

        public static Character At(String x, Integer n) => x.Value[n];
        public static Integer Count(String x) => x.Value.Length;

        public static int CombineHashCodes(params object[] objects)
        {
            if (objects.Length == 0) return 0;
            var r = objects[0].GetHashCode();
            for (var i = 1; i < objects.Length; ++i)
                r = CombineHashCodes(r, objects[i].GetHashCode());
            return r;
        }

        public static (T0, T1) Tuple2<T0, T1>(this T0 item0, T1 item1) => (item0, item1);
        public static (T0, T1, T2) Tuple3<T0, T1, T2>(this T0 item0, T1 item1, T2 item2) => (item0, item1, item2);
        public static (T0, T1, T2, T3) Tuple4<T0, T1, T2, T3>(this T0 item0, T1 item1, T2 item2, T3 item3) => (item0, item1, item2, item3);

        public static int CombineHashCodes(int h1, int h2)
        {
            unchecked
            {
                var rol5 = ((uint)h1 << 5) | ((uint)h1 >> 27);
                return ((int)rol5 + h1) ^ h2;
            }
        }     
        
        public static Dynamic New(Type type, IArray<IAny> args) 
            => Dynamic.New(System.Activator.CreateInstance(type.Value, args.ToSystemArray()));

        public static T[] ToSystemArray<T>(this IArray<T> self) 
        {
           var r = new T[self.Count];
           for (var i=0; i< self.Count; i++)
			   r[i] = self.At(i);
           return r;
        }

        public static Array<T> ToPrimitiveArray<T>(this IArray<T> self)
            => self is Array<T> a ? a : new Array<T>(self.Count, self.At);

        public static Boolean Equals(this Number a, Number b) => a.Value.Equals(b.Value);
        public static Boolean Equals(this Character a, Character b) => a.Value.Equals(b.Value);
        public static Boolean Equals(this Integer a, Integer b) => a.Value.Equals(b.Value);
        public static Boolean Equals(this Boolean a, Boolean b) => a.Value.Equals(b.Value);
        public static Boolean Equals(this String a, String b) => a.Value.Equals(b.Value);

        public static Boolean LessThanOrEquals(this Number a, Number b) => a.Value <= b.Value;
        public static Boolean LessThanOrEquals(this Character a, Character b) => a.Value <= b.Value;
        public static Boolean LessThanOrEquals(this Integer a, Integer b) => a.Value <= b.Value;
        public static Boolean LessThanOrEquals(this Boolean a, Boolean b) => !a || (a && b);
        public static Boolean LessThanOrEquals(this String a, String b) => a.Value.CompareTo(b.Value) <= 0;

        public static String ToString(this Number x) => x.Value.ToString();
        public static String ToString(this Boolean x) => x ? "true" : "false";
        public static String ToString(this Character x) => x.Value.ToString();
        public static String ToString(this Integer x) => x.Value.ToString();
        public static String ToString(this String x) => $"\"{x.Value}\"";
        public static String ToString(this Type x) => $"\"{x.Value}\"";

        public static Vector2D Eval(this ICurve2D self, Number x) => throw new System.NotImplementedException();
        public static Vector3D Eval(this ICurve3D self, Number x) => throw new System.NotImplementedException();
        public static Vector3D Eval(this ISurface self, Vector2D uv) => throw new System.NotImplementedException();

        public static Number Distance(this ICurve2D self, Vector2D uv) => throw new System.NotImplementedException();
        public static Number Distance(this ICurve3D self, Vector3D p) => throw new System.NotImplementedException();
        public static Number Distance(this ISurface self, Vector3D p) => throw new System.NotImplementedException();
    
        public static Bounds3D Deform(this Bounds3D self, System.Func<Vector3D, Vector3D> f) => throw new System.NotImplementedException();
    
        public static Boolean ClosedX(this ISurface self) => throw new System.NotImplementedException();
        public static Boolean ClosedY(this ISurface self) => throw new System.NotImplementedException();

        public static Vector2D Divide(this Number s, Vector2D v) => (s / v.X, s / v.Y);
        public static Vector3D Divide(this Number s, Vector3D v) => (s / v.X, s / v.Y, s / v.Z);
        public static Vector4D Divide(this Number s, Vector4D v) => (s / v.X, s / v.Y, s / v.Z, s / v.W);
    }
    
    public interface IArray<T> : System.Collections.Generic.IReadOnlyList<T>
    {
        Integer Count { get; }
        T At(Integer n);
        T this[Integer n] { get; }
    }

    public readonly partial struct Number
    {
    }

    public readonly struct Array<T> : IArray<T>
    {
        private readonly System.Func<Integer, T> _func;
        public Integer Count { get; }
        public T At(Integer n) => _func(n);
        public T this[Integer n] => _func(n);
        public Array(Integer count, System.Func<Integer, T> func)
        {
            Count = count;
            _func = func;
        }
        public System.Collections.Generic.IEnumerator<T> GetEnumerator()
		{
			for (var i = 0; i < Count; i++)
				yield return this[i];
		}
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        T System.Collections.Generic.IReadOnlyList<T>.this[int n] => At(n);
        int System.Collections.Generic.IReadOnlyCollection<T>.Count => this.Count;
    }

    public readonly struct Array2D<T> : IArray2D<T>
    {
        private readonly System.Func<Integer, Integer, T> _func;
        public Integer Count => ColumnCount * RowCount;
        public Integer ColumnCount { get; }
        public Integer RowCount { get; }
        public T At(Integer n) => At(n % ColumnCount, n / ColumnCount);
        public T this[Integer n] => At(n % ColumnCount, n / ColumnCount);
        public T At(Integer col, Integer row) => _func(col, row);
        public T this[Integer col, Integer row] => _func(col, row);
        public Array2D(Integer numCols, Integer numRows, System.Func<Integer, Integer, T> func)
        {
            ColumnCount = numCols;
            RowCount = numRows;
            _func = func;
        }
        public System.Collections.Generic.IEnumerator<T> GetEnumerator()
		{
			for (var i = 0; i < Count; i++)
				yield return this[i];
		}
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        T System.Collections.Generic.IReadOnlyList<T>.this[int n] => At(n);
        int System.Collections.Generic.IReadOnlyCollection<T>.Count => this.Count;
    }

    public readonly struct PrimitiveArray<T> : IArray<T>
    {
        private readonly T[] _data;
        public Integer Count => _data.Length;
        public T At(Integer n) => _data[n];
        public T this[Integer n] => _data[n];
        public PrimitiveArray(T[] data) => _data = data;    
        public System.Collections.Generic.IEnumerator<T> GetEnumerator()
		{
			for (var i = 0; i < Count; i++)
				yield return this[i];
		}
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        T System.Collections.Generic.IReadOnlyList<T>.this[int n] => At(n);
        int System.Collections.Generic.IReadOnlyCollection<T>.Count => this.Count;
    }

    public readonly struct ListArray<T> : IArray<T>
    {
        private readonly System.Collections.Generic.IReadOnlyList<T> _data;
        public Integer Count => _data.Count;
        public T At(Integer n) => _data[n];
        public T this[Integer n] => _data[n];
        public ListArray(System.Collections.Generic.IReadOnlyList<T> data) => _data = data;
        public System.Collections.Generic.IEnumerator<T> GetEnumerator()
		{
			for (var i = 0; i < Count; i++)
				yield return this[i];
		}
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
        T System.Collections.Generic.IReadOnlyList<T>.this[int n] => At(n);
        int System.Collections.Generic.IReadOnlyCollection<T>.Count => this.Count;
    }

    public readonly partial struct String
    {
    }

    public readonly partial struct Boolean
    {
        public static bool operator true(Boolean b) => b.Value;
        public static bool operator false(Boolean b) => !b.Value;
    }
    
    public readonly partial struct Integer
    {
         public static implicit operator Number(Integer self) => self.Value;
    }

    public readonly partial struct Character
    {
        public static implicit operator Number(Character self) => self.Value;
    }

    public readonly partial struct Dynamic
    {
        public readonly object Value;
        public Dynamic WithValue(object value) => new Dynamic(value);
        public Dynamic(object value) => (Value) = (value);
        public static Dynamic Default = new Dynamic();
        public static Dynamic New(object value) => new Dynamic(value);
        public String TypeName => "Dynamic";
        public IArray<String> FieldNames => Intrinsics.MakeArray<String>("Value");
        public IArray<Dynamic> FieldValues => Intrinsics.MakeArray<Dynamic>(new Dynamic(Value));
        public T As<T>() => (T)Value;
    }

    public readonly partial struct Function0<TR>
    {
        public readonly System.Func<TR> _function;
        public Function0(System.Func<TR> f) => _function = f;
        public static implicit operator Function0<TR>(System.Func<TR> f) => new Function0<TR>(f);
    }

    public readonly partial struct Function1<T0, TR>
    {
        public readonly System.Func<T0, TR> _function;
        public Function1(System.Func<T0, TR> f) => _function = f;
        public static implicit operator Function1<T0, TR>(System.Func<T0, TR> f) => new Function1<T0, TR>(f);
    }

    public readonly partial struct Function2<T0, T1, TR>
    {
        public readonly System.Func<T0, T1, TR> _function;
        public Function2(System.Func<T0, T1, TR> f) => _function = f;
        public static implicit operator Function2<T0, T1, TR>(System.Func<T0, T1, TR> f) => new Function2<T0, T1, TR>(f);
    }

    public readonly partial struct Function3<T0, T1, T2, TR>
    {
        public readonly System.Func<T0, T1, T2, TR> _function;
        public Function3(System.Func<T0, T1, T2, TR> f) => _function = f;
        public static implicit operator Function3<T0, T1, T2, TR>(System.Func<T0, T1, T2, TR> f) => new Function3<T0, T1, T2, TR>(f);
    }
    
    public readonly partial struct Function4<T0, T1, T2, T3, TR>
    {
        public readonly System.Func<T0, T1, T2, T3, TR> _function;
        public Function4(System.Func<T0, T1, T2, T3, TR> f) => _function = f;
        public static implicit operator Function4<T0, T1, T2, T3, TR>(System.Func<T0, T1, T2, T3, TR> f) => new Function4<T0, T1, T2, T3, TR>(f);
    }
