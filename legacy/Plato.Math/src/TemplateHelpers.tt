<#@ import namespace="System.Linq" #>
<#+
    private void CreateSetter(string name, int i, string[] fields, string[] types)
    {
       var field = fields[i];
       var type = types[i];
       var sb = new StringBuilder();

       for (var j=0; j < fields.Length; ++j) {
            if (j > 0) sb.Append(", ");
            sb.Append(j == i ? "x" : fields[j]);
        }
        var args = sb.ToString();
#>
        public <#= name #> With<#= field #>(<#= type #> x) => new <#= name #>(<#= args #>);
<#+
    }

    private void CreateSetters(string name, string[] fields, string[] types) {
        for (var i=0; i < fields.Length; ++i)
            CreateSetter(name, i, fields, types);
    }

    private void CreateShapeStruct(string name, string[] fields, string type)
    {
        CreateStruct(name, fields, fields.Select(f => type).ToArray());
    }

    private void CreateVectorStruct(string name, string[] fields, string type)
    {
        CreateStruct(name, fields, fields.Select(f => type).ToArray(), true);
    }

    private void CreateIntervalStruct(string name, string type)
    {
        CreateStruct(name, new[] { "Min", "Max" }, new[] { type, type }, false, true);
    }

    private static string ZeroValue(string type) {
        switch (type)
        {
        case "int": return "0";
        case "byte": return "0";
        case "short": return "0";
        case "float": return "0f";
        case "double": return "0.0";
        case "long": return "0L";
        default: return type + ".Zero";
        }
    }

    private static bool IsIntType(string type) {
        switch (type)
        {
        case "int":
        case "byte":
        case "short":
        case "bool":
        case "long":
            return true;
        }
        return false;
    }

    private static string OneValue(string type) {
        switch (type)
        {
        case "byte": return "1";
        case "short": return "1";
        case "int": return "1";
        case "float": return "1f";
        case "double": return "1.0";
        case "long": return "1L";
        default: return type + ".One";
        }
    }

    private void CreateBinaryOp(string name, string[] fields, string type, string op)
    {
        var combineArgs0 = string.Join(",", fields.Select(f => $"value1.{f} {op} value2.{f}"));
        var combineArgs1 = string.Join(",", fields.Select(f => $"value1.{f} {op} value2"));
        var combineArgs2 = string.Join(",", fields.Select(f => $"value1 {op} value2.{f}"));
#>
        public static <#= name #> operator <#= op #>(<#= name #> value1, <#= name #> value2) => new <#= name #>(<#= combineArgs0 #>);
        public static <#= name #> operator <#= op #>(<#= name #> value1, <#= type #> value2) => new <#= name #>(<#= combineArgs1 #>);
        public static <#= name #> operator <#= op #>(<#= type #> value1, <#= name #> value2) => new <#= name #>(<#= combineArgs2 #>);
<#+
    }

    private void CreateIntervalAndVectorOps(string name, string[] fields, string type)
    {
        var opArgs = $"{name} x0, {name} x1";

        var isNanBody = string.Join(" || ", fields.Select(f => $"{f}.IsNaN()"));
        var isInfinityBody = string.Join(" || ", fields.Select(f => $"{f}.IsInfinity()"));

#>
        public bool IsNaN() => <#= isNanBody #>;
        public bool IsInfinity() => <#= isInfinityBody #>;
        public int CompareTo(<#= name #> x) => (MagnitudeSquared() - x.MagnitudeSquared()).Sign();
        public static bool operator <(<#= opArgs #>) => x0.CompareTo(x1) < 0;
        public static bool operator <=(<#= opArgs #>) => x0.CompareTo(x1) <= 0;
        public static bool operator >(<#= opArgs #>) => x0.CompareTo(x1) > 0;
        public static bool operator >=(<#= opArgs #>) => x0.CompareTo(x1) >= 0;
<#+
    }

    private void CreateIntervalOps(string name, string[] fields, string type)
    {
#>
        public <#= type #> Extent => (Max - Min);
        public <#= type #> Center => Min.Average(Max);   
        public double MagnitudeSquared() => Extent.MagnitudeSquared();
        public double Magnitude() => MagnitudeSquared().Sqrt();        
        public <#= name #> Merge(<#= name #> other) => new <#= name #>(Min.Min(other.Min), Max.Max(other.Max));
        public <#= name #> Intersection(<#= name #> other) => new <#= name #>(Min.Max(other.Min), Max.Min(other.Max));
        public static <#= name #> operator + (<#= name #> value1, <#= name #> value2) => value1.Merge(value2);
        public static <#= name #> operator - (<#= name #> value1, <#= name #> value2) => value1.Intersection(value2);
        public <#= name #> Merge(<#= type #> other) => new <#= name #>(Min.Min(other), Max.Max(other));
        public static <#= name #> operator + (<#= name #> value1, <#= type #> value2) => value1.Merge(value2);
        public static <#= name #> Empty = Create(<#= type #>.MaxValue, <#= type #>.MinValue);
<#+
        CreateIntervalAndVectorOps(name, fields, type);
    }

    private void CreateVectorOps(string name, string[] fields, string type)
    {
        CreateBinaryOp(name, fields, type, "+");
        CreateBinaryOp(name, fields, type, "-");
        CreateBinaryOp(name, fields, type, "*");
        CreateBinaryOp(name, fields, type, "/");

        var ctorArgs = string.Join(", ", fields.Select(f => "value"));
        var dotArgs = string.Join(" + ", fields.Select(f => $"value1.{f} * value2.{f}"));
        var one = OneValue(type);
        var compareBody = string.Join(" && ", fields.Select(f => $"{f}.Abs() < tolerance"));
        var indexBody = string.Join(" : ", fields.Take(fields.Length - 1).Select((f, i) => $"n == {i} ? {f}")) + ":" + fields[fields.Length-1];

        var minBody = string.Join(".Min", fields.Select(f => $"({f})"));
        var maxBody = string.Join(".Max", fields.Select(f => $"({f})"));
        var sumBody = string.Join(" + ", fields.Select(f => $"({f})"));
        var sumSqrBody = string.Join(" + ", fields.Select(f => $"({f}).Sqr()"));
        var productBody = string.Join(" * ", fields.Select(f => $"({f})"));
        var switchBody = string.Join(" : ", fields.Select((f, i) => $"n == {i} ? {f}"));

#>
        public static <#= name #> One = new <#= name #>(<#= one #>);
<#+
        foreach (var f in fields) {
#>
        public static <#= name #> Unit<#= f #> = Zero.With<#= f #>(<#= one #>);
<#+
        }

#>
        public <#= name #>(<#= type #> value) : this(<#= ctorArgs #>) { }
        public static <#= name #> operator -(<#= name #> value) => Zero - value;
        public static <#= type #> Dot(<#= name #> value1, <#= name #> value2) => <#= dotArgs #>;
        public <#= type #> Dot(<#= name #> value) => <#= name #>.Dot(this, value);
        public bool AlmostZero(float tolerance = Constants.Tolerance) => <#= compareBody #>;
        public bool AnyComponentNegative() => MinComponent() < 0;
        public <#= type #> MinComponent() => <#= minBody #>;
        public <#= type #> MaxComponent() => <#= maxBody #>;
        public <#= type #> SumComponents() => <#= sumBody #>;
        public <#= type #> SumSqrComponents() => <#= sumSqrBody #>;
        public <#= type #> ProductComponents() => <#= productBody #>;
        public <#= type #> GetComponent(int n) => <#= indexBody #>;
        public double MagnitudeSquared() => SumSqrComponents();
        public double Magnitude() => MagnitudeSquared().Sqrt();        
        public const int NumComponents = <#= fields.Length #>;
        public int Count => NumComponents;
        public <#= type #> this[int n] => <#= switchBody #> : throw new ArgumentOutOfRangeException("n");
        public IIterator< <#= type #> > Iterator => new ArrayIterator< <#= type #> >(this);
<#+
        CreateIntervalAndVectorOps(name, fields, type);
    }

    private void CreateStruct(string name, string[] fields, string[] types, bool isVector = false, bool isInterval = false)
    {
        var toStringBodyInner = string.Join(", ", fields.Select((f) => $"{f} = {{{f}}}"));
        var toStringBody = $"{name}({toStringBodyInner})";
        var hashBodyInner = string.Join(", ", fields.Select((f) => $"{f}.GetHashCode()"));
        var hashBody = $"Hash.Combine({hashBodyInner})";
        var eqBody = string.Join(" && ",fields.Select((f) => $"{f} == x.{f}"));
        var almostEqBody = string.Join(" && ",fields.Select((f) => $"{f}.AlmostEquals(x.{f}, tolerance)"));
        var opArgs = $"{name} x0, {name} x1";
        var ctorArgs = string.Join(", ", fields.Zip(types, (field, type) => $"{type} {field.ToLower()}"));
        var fieldTypes = string.Join(", ", types);
        var fieldNames = string.Join(", ", fields);
        var argNames = string.Join(", ", fields.Select(f => f.ToLower()));
        var selfFieldNames = string.Join(", ", fields.Select(n => $"self.{n}"));
        var tupleArgs = string.Join(", ", fields.Select(field => $"tuple.{field.ToLower()}"));
        var ctorAssign = string.Join(" ", fields.Select((f) => $"{f} = {f.ToLower()};"));
        var defaultArgs = string.Join(", ", types.Select(t => $"default"));
        var minArgs = string.Join(", ", types.Select(t => $"{t}.MinValue"));
        var maxArgs = string.Join(", ", types.Select(t => $"{t}.MaxValue"));
        var deconstructArgs = string.Join(", ", fields.Zip(types, (field, type) => $"out {type} {field.ToLower()}"));
        var deconstructAssign = string.Join(" ", fields.Select((f) => $"{f.ToLower()} = {f};"));

#>

    [StructLayout(LayoutKind.Sequential, Pack=4)]
    [DataContract]
    public readonly partial struct <#= name #> 
        : IEquatable< <#= name #> >
<#+
    if (isVector)
    {
#>
        , IArray< <#= types[0] #> >    
<#+
    }
    if (isVector || isInterval)
    {
#>
        , IComparable< <#= name #> >
<#+
    }
#>
    {
<#+
        for (var i=0; i < fields.Length; ++i) {
#>
        [DataMember] public readonly <#= types[i] #> <#= fields[i] #>;
<#+
        }
#>
        public <#= name #>((<#= ctorArgs #>) tuple) : this(<#= tupleArgs #>) { }
        public <#= name #>(<#= ctorArgs #>) { <#= ctorAssign #> }
        public static <#= name #> Create(<#= ctorArgs #>) => new <#= name #>(<#= argNames #>);
        public static <#= name #> Create((<#= ctorArgs #>) tuple) => new <#= name #>(tuple);
        public override bool Equals(object obj) => obj is <#= name #> x && Equals(x);
        public override int GetHashCode() => <#= hashBody #>;
        public override string ToString() => $"<#= toStringBody #>";
        public void Deconstruct(<#= deconstructArgs #>) {<#= deconstructAssign #> }
        public bool Equals(<#= name #> x) => <#= eqBody #>;
        public static bool operator ==(<#= opArgs #>) => x0.Equals(x1);
        public static bool operator !=(<#= opArgs #>) => !x0.Equals(x1);
        public static implicit operator <#= name #>((<#= ctorArgs #>) tuple) => new <#= name #>(tuple);
        public static implicit operator (<#= ctorArgs #>)(<#= name #> self) => (<#= selfFieldNames #>);
<#+
        if (!types.Any(IsIntType))
        {
#>
        public bool AlmostEquals(<#= name #> x, float tolerance = Constants.Tolerance) => <#= almostEqBody #>;
<#+
        }
#>
        public static <#= name #> Zero = new <#= name #>(<#= defaultArgs #>);
        public static <#= name #> MinValue = new <#= name #>(<#= minArgs #>);
        public static <#= name #> MaxValue = new <#= name #>(<#= maxArgs #>);
<#+
        CreateSetters(name, fields, types);
        if (isVector) CreateVectorOps(name, fields, types[0]);

        if (isInterval) CreateIntervalOps(name, fields, types[0]);
#>
    }
<#+
    }
#>
