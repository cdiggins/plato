
// AUTOGENERATED FILE: DO NOT EDIT
// This file is generated from CommonAttributeExtensions.tt


using Vim.LinqArray;
using Vim.Math3d;

namespace Vim.G3d
{
    public static class CommonAttributes
    {

        public const string ObjectFaceSize = "g3d:all:facesize:0:int32:1";
        public const string Index = "g3d:corner:index:0:int32:1";
        public const string Position = "g3d:vertex:position:0:float32:3";
        public const string VertexUv = "g3d:vertex:uv:0:float32:2";
        public const string VertexUvw = "g3d:vertex:uv:0:float32:3";
        public const string VertexNormal = "g3d:vertex:normal:0:float32:3";
        public const string VertexColor = "g3d:vertex:color:0:float32:4";
        public const string VertexColor8Bit = "g3d:vertex:color:0:int8:4";
        public const string VertexBitangent = "g3d:vertex:bitangent:0:float32:3";
        public const string VertexTangent = "g3d:vertex:tangent:0:float32:4";
        public const string VertexSelectionWeight = "g3d:vertex:weight:0:float32:1";
        public const string FaceColor = "g3d:face:color:0:float32:4";
        public const string FaceMaterial = "g3d:face:material:0:int32:1";
        public const string FaceNormal = "g3d:face:normal:0:float32:3";
        public const string MeshSubmeshOffset = "g3d:mesh:submeshoffset:0:int32:1";
        public const string InstanceTransform = "g3d:instance:transform:0:float32:16";
        public const string InstanceParent = "g3d:instance:parent:0:int32:1";
        public const string InstanceMesh = "g3d:instance:mesh:0:int32:1";
        public const string InstanceFlags = "g3d:instance:flags:0:uint16:1";
        public const string LineTangentIn = "g3d:vertex:tangent:0:float32:3";
        public const string LineTangentOut = "g3d:vertex:tangent:1:float32:3";
        public const string ShapeVertex = "g3d:shapevertex:position:0:float32:3";
        public const string ShapeVertexOffset = "g3d:shape:vertexoffset:0:int32:1";
        public const string ShapeColor = "g3d:shape:color:0:float32:4";
        public const string ShapeWidth = "g3d:shape:width:0:float32:1";
        public const string MaterialColor = "g3d:material:color:0:float32:4";
        public const string MaterialGlossiness = "g3d:material:glossiness:0:float32:1";
        public const string MaterialSmoothness = "g3d:material:smoothness:0:float32:1";
        public const string SubmeshIndexOffset = "g3d:submesh:indexoffset:0:int32:1";
        public const string SubmeshMaterial = "g3d:submesh:material:0:int32:1";
    }

    public static class CommonAttributeExtensions
    {

        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.ObjectFaceSize, index);
        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.ObjectFaceSize);
        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this int[] xs, int index) => xs.ToIArray().ToObjectFaceSizeAttribute(index);
        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this int[] xs) => xs.ToIArray().ToObjectFaceSizeAttribute();
        public static GeometryAttribute<int> GetAttributeObjectFaceSize(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.ObjectFaceSize);
        public static IArray<int> GetAttributeDataObjectFaceSize(this IGeometryAttributes self) => self.GetAttributeObjectFaceSize()?.Data;
        public static GeometryAttribute<int> ToIndexAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.Index, index);
        public static GeometryAttribute<int> ToIndexAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.Index);
        public static GeometryAttribute<int> ToIndexAttribute(this int[] xs, int index) => xs.ToIArray().ToIndexAttribute(index);
        public static GeometryAttribute<int> ToIndexAttribute(this int[] xs) => xs.ToIArray().ToIndexAttribute();
        public static GeometryAttribute<int> GetAttributeIndex(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.Index);
        public static IArray<int> GetAttributeDataIndex(this IGeometryAttributes self) => self.GetAttributeIndex()?.Data;
        public static GeometryAttribute<Vector3> ToPositionAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.Position, index);
        public static GeometryAttribute<Vector3> ToPositionAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.Position);
        public static GeometryAttribute<Vector3> ToPositionAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToPositionAttribute(index);
        public static GeometryAttribute<Vector3> ToPositionAttribute(this Vector3[] xs) => xs.ToIArray().ToPositionAttribute();
        public static GeometryAttribute<Vector3> GetAttributePosition(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.Position);
        public static IArray<Vector3> GetAttributeDataPosition(this IGeometryAttributes self) => self.GetAttributePosition()?.Data;
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this IArray<Vector2> xs, int index) => xs.ToAttribute(CommonAttributes.VertexUv, index);
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this IArray<Vector2> xs) => xs.ToAttribute(CommonAttributes.VertexUv);
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this Vector2[] xs, int index) => xs.ToIArray().ToVertexUvAttribute(index);
        public static GeometryAttribute<Vector2> ToVertexUvAttribute(this Vector2[] xs) => xs.ToIArray().ToVertexUvAttribute();
        public static GeometryAttribute<Vector2> GetAttributeVertexUv(this IGeometryAttributes self) => self.GetAttribute<Vector2>(CommonAttributes.VertexUv);
        public static IArray<Vector2> GetAttributeDataVertexUv(this IGeometryAttributes self) => self.GetAttributeVertexUv()?.Data;
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexUvw, index);
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexUvw);
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexUvwAttribute(index);
        public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexUvwAttribute();
        public static GeometryAttribute<Vector3> GetAttributeVertexUvw(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexUvw);
        public static IArray<Vector3> GetAttributeDataVertexUvw(this IGeometryAttributes self) => self.GetAttributeVertexUvw()?.Data;
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexNormal, index);
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexNormal);
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexNormalAttribute(index);
        public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexNormalAttribute();
        public static GeometryAttribute<Vector3> GetAttributeVertexNormal(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexNormal);
        public static IArray<Vector3> GetAttributeDataVertexNormal(this IGeometryAttributes self) => self.GetAttributeVertexNormal()?.Data;
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexColor, index);
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.VertexColor);
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToVertexColorAttribute(index);
        public static GeometryAttribute<Vector4> ToVertexColorAttribute(this Vector4[] xs) => xs.ToIArray().ToVertexColorAttribute();
        public static GeometryAttribute<Vector4> GetAttributeVertexColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.VertexColor);
        public static IArray<Vector4> GetAttributeDataVertexColor(this IGeometryAttributes self) => self.GetAttributeVertexColor()?.Data;
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this IArray<Byte4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexColor8Bit, index);
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this IArray<Byte4> xs) => xs.ToAttribute(CommonAttributes.VertexColor8Bit);
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this Byte4[] xs, int index) => xs.ToIArray().ToVertexColor8BitAttribute(index);
        public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this Byte4[] xs) => xs.ToIArray().ToVertexColor8BitAttribute();
        public static GeometryAttribute<Byte4> GetAttributeVertexColor8Bit(this IGeometryAttributes self) => self.GetAttribute<Byte4>(CommonAttributes.VertexColor8Bit);
        public static IArray<Byte4> GetAttributeDataVertexColor8Bit(this IGeometryAttributes self) => self.GetAttributeVertexColor8Bit()?.Data;
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexBitangent, index);
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexBitangent);
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexBitangentAttribute(index);
        public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexBitangentAttribute();
        public static GeometryAttribute<Vector3> GetAttributeVertexBitangent(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexBitangent);
        public static IArray<Vector3> GetAttributeDataVertexBitangent(this IGeometryAttributes self) => self.GetAttributeVertexBitangent()?.Data;
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexTangent, index);
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.VertexTangent);
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToVertexTangentAttribute(index);
        public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this Vector4[] xs) => xs.ToIArray().ToVertexTangentAttribute();
        public static GeometryAttribute<Vector4> GetAttributeVertexTangent(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.VertexTangent);
        public static IArray<Vector4> GetAttributeDataVertexTangent(this IGeometryAttributes self) => self.GetAttributeVertexTangent()?.Data;
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.VertexSelectionWeight, index);
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.VertexSelectionWeight);
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this float[] xs, int index) => xs.ToIArray().ToVertexSelectionWeightAttribute(index);
        public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this float[] xs) => xs.ToIArray().ToVertexSelectionWeightAttribute();
        public static GeometryAttribute<float> GetAttributeVertexSelectionWeight(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.VertexSelectionWeight);
        public static IArray<float> GetAttributeDataVertexSelectionWeight(this IGeometryAttributes self) => self.GetAttributeVertexSelectionWeight()?.Data;
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.FaceColor, index);
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.FaceColor);
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToFaceColorAttribute(index);
        public static GeometryAttribute<Vector4> ToFaceColorAttribute(this Vector4[] xs) => xs.ToIArray().ToFaceColorAttribute();
        public static GeometryAttribute<Vector4> GetAttributeFaceColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.FaceColor);
        public static IArray<Vector4> GetAttributeDataFaceColor(this IGeometryAttributes self) => self.GetAttributeFaceColor()?.Data;
        public static GeometryAttribute<int> ToFaceMaterialAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.FaceMaterial, index);
        public static GeometryAttribute<int> ToFaceMaterialAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.FaceMaterial);
        public static GeometryAttribute<int> ToFaceMaterialAttribute(this int[] xs, int index) => xs.ToIArray().ToFaceMaterialAttribute(index);
        public static GeometryAttribute<int> ToFaceMaterialAttribute(this int[] xs) => xs.ToIArray().ToFaceMaterialAttribute();
        public static GeometryAttribute<int> GetAttributeFaceMaterial(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.FaceMaterial);
        public static IArray<int> GetAttributeDataFaceMaterial(this IGeometryAttributes self) => self.GetAttributeFaceMaterial()?.Data;
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.FaceNormal, index);
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.FaceNormal);
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToFaceNormalAttribute(index);
        public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this Vector3[] xs) => xs.ToIArray().ToFaceNormalAttribute();
        public static GeometryAttribute<Vector3> GetAttributeFaceNormal(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.FaceNormal);
        public static IArray<Vector3> GetAttributeDataFaceNormal(this IGeometryAttributes self) => self.GetAttributeFaceNormal()?.Data;
        public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.MeshSubmeshOffset, index);
        public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.MeshSubmeshOffset);
        public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToMeshSubmeshOffsetAttribute(index);
        public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this int[] xs) => xs.ToIArray().ToMeshSubmeshOffsetAttribute();
        public static GeometryAttribute<int> GetAttributeMeshSubmeshOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.MeshSubmeshOffset);
        public static IArray<int> GetAttributeDataMeshSubmeshOffset(this IGeometryAttributes self) => self.GetAttributeMeshSubmeshOffset()?.Data;
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this IArray<Matrix4x4> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceTransform, index);
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this IArray<Matrix4x4> xs) => xs.ToAttribute(CommonAttributes.InstanceTransform);
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this Matrix4x4[] xs, int index) => xs.ToIArray().ToInstanceTransformAttribute(index);
        public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this Matrix4x4[] xs) => xs.ToIArray().ToInstanceTransformAttribute();
        public static GeometryAttribute<Matrix4x4> GetAttributeInstanceTransform(this IGeometryAttributes self) => self.GetAttribute<Matrix4x4>(CommonAttributes.InstanceTransform);
        public static IArray<Matrix4x4> GetAttributeDataInstanceTransform(this IGeometryAttributes self) => self.GetAttributeInstanceTransform()?.Data;
        public static GeometryAttribute<int> ToInstanceParentAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceParent, index);
        public static GeometryAttribute<int> ToInstanceParentAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.InstanceParent);
        public static GeometryAttribute<int> ToInstanceParentAttribute(this int[] xs, int index) => xs.ToIArray().ToInstanceParentAttribute(index);
        public static GeometryAttribute<int> ToInstanceParentAttribute(this int[] xs) => xs.ToIArray().ToInstanceParentAttribute();
        public static GeometryAttribute<int> GetAttributeInstanceParent(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.InstanceParent);
        public static IArray<int> GetAttributeDataInstanceParent(this IGeometryAttributes self) => self.GetAttributeInstanceParent()?.Data;
        public static GeometryAttribute<int> ToInstanceMeshAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceMesh, index);
        public static GeometryAttribute<int> ToInstanceMeshAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.InstanceMesh);
        public static GeometryAttribute<int> ToInstanceMeshAttribute(this int[] xs, int index) => xs.ToIArray().ToInstanceMeshAttribute(index);
        public static GeometryAttribute<int> ToInstanceMeshAttribute(this int[] xs) => xs.ToIArray().ToInstanceMeshAttribute();
        public static GeometryAttribute<int> GetAttributeInstanceMesh(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.InstanceMesh);
        public static IArray<int> GetAttributeDataInstanceMesh(this IGeometryAttributes self) => self.GetAttributeInstanceMesh()?.Data;
        public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this IArray<ushort> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceFlags, index);
        public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this IArray<ushort> xs) => xs.ToAttribute(CommonAttributes.InstanceFlags);
        public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this ushort[] xs, int index) => xs.ToIArray().ToInstanceFlagsAttribute(index);
        public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this ushort[] xs) => xs.ToIArray().ToInstanceFlagsAttribute();
        public static GeometryAttribute<ushort> GetAttributeInstanceFlags(this IGeometryAttributes self) => self.GetAttribute<ushort>(CommonAttributes.InstanceFlags);
        public static IArray<ushort> GetAttributeDataInstanceFlags(this IGeometryAttributes self) => self.GetAttributeInstanceFlags()?.Data;
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.LineTangentIn, index);
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.LineTangentIn);
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToLineTangentInAttribute(index);
        public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this Vector3[] xs) => xs.ToIArray().ToLineTangentInAttribute();
        public static GeometryAttribute<Vector3> GetAttributeLineTangentIn(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.LineTangentIn);
        public static IArray<Vector3> GetAttributeDataLineTangentIn(this IGeometryAttributes self) => self.GetAttributeLineTangentIn()?.Data;
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.LineTangentOut, index);
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.LineTangentOut);
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToLineTangentOutAttribute(index);
        public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this Vector3[] xs) => xs.ToIArray().ToLineTangentOutAttribute();
        public static GeometryAttribute<Vector3> GetAttributeLineTangentOut(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.LineTangentOut);
        public static IArray<Vector3> GetAttributeDataLineTangentOut(this IGeometryAttributes self) => self.GetAttributeLineTangentOut()?.Data;
        public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeVertex, index);
        public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.ShapeVertex);
        public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToShapeVertexAttribute(index);
        public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this Vector3[] xs) => xs.ToIArray().ToShapeVertexAttribute();
        public static GeometryAttribute<Vector3> GetAttributeShapeVertex(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.ShapeVertex);
        public static IArray<Vector3> GetAttributeDataShapeVertex(this IGeometryAttributes self) => self.GetAttributeShapeVertex()?.Data;
        public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeVertexOffset, index);
        public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.ShapeVertexOffset);
        public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToShapeVertexOffsetAttribute(index);
        public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this int[] xs) => xs.ToIArray().ToShapeVertexOffsetAttribute();
        public static GeometryAttribute<int> GetAttributeShapeVertexOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.ShapeVertexOffset);
        public static IArray<int> GetAttributeDataShapeVertexOffset(this IGeometryAttributes self) => self.GetAttributeShapeVertexOffset()?.Data;
        public static GeometryAttribute<Vector4> ToShapeColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeColor, index);
        public static GeometryAttribute<Vector4> ToShapeColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.ShapeColor);
        public static GeometryAttribute<Vector4> ToShapeColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToShapeColorAttribute(index);
        public static GeometryAttribute<Vector4> ToShapeColorAttribute(this Vector4[] xs) => xs.ToIArray().ToShapeColorAttribute();
        public static GeometryAttribute<Vector4> GetAttributeShapeColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.ShapeColor);
        public static IArray<Vector4> GetAttributeDataShapeColor(this IGeometryAttributes self) => self.GetAttributeShapeColor()?.Data;
        public static GeometryAttribute<float> ToShapeWidthAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeWidth, index);
        public static GeometryAttribute<float> ToShapeWidthAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.ShapeWidth);
        public static GeometryAttribute<float> ToShapeWidthAttribute(this float[] xs, int index) => xs.ToIArray().ToShapeWidthAttribute(index);
        public static GeometryAttribute<float> ToShapeWidthAttribute(this float[] xs) => xs.ToIArray().ToShapeWidthAttribute();
        public static GeometryAttribute<float> GetAttributeShapeWidth(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.ShapeWidth);
        public static IArray<float> GetAttributeDataShapeWidth(this IGeometryAttributes self) => self.GetAttributeShapeWidth()?.Data;
        public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.MaterialColor, index);
        public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.MaterialColor);
        public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToMaterialColorAttribute(index);
        public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this Vector4[] xs) => xs.ToIArray().ToMaterialColorAttribute();
        public static GeometryAttribute<Vector4> GetAttributeMaterialColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.MaterialColor);
        public static IArray<Vector4> GetAttributeDataMaterialColor(this IGeometryAttributes self) => self.GetAttributeMaterialColor()?.Data;
        public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.MaterialGlossiness, index);
        public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.MaterialGlossiness);
        public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this float[] xs, int index) => xs.ToIArray().ToMaterialGlossinessAttribute(index);
        public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this float[] xs) => xs.ToIArray().ToMaterialGlossinessAttribute();
        public static GeometryAttribute<float> GetAttributeMaterialGlossiness(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.MaterialGlossiness);
        public static IArray<float> GetAttributeDataMaterialGlossiness(this IGeometryAttributes self) => self.GetAttributeMaterialGlossiness()?.Data;
        public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.MaterialSmoothness, index);
        public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.MaterialSmoothness);
        public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this float[] xs, int index) => xs.ToIArray().ToMaterialSmoothnessAttribute(index);
        public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this float[] xs) => xs.ToIArray().ToMaterialSmoothnessAttribute();
        public static GeometryAttribute<float> GetAttributeMaterialSmoothness(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.MaterialSmoothness);
        public static IArray<float> GetAttributeDataMaterialSmoothness(this IGeometryAttributes self) => self.GetAttributeMaterialSmoothness()?.Data;
        public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.SubmeshIndexOffset, index);
        public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.SubmeshIndexOffset);
        public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToSubmeshIndexOffsetAttribute(index);
        public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this int[] xs) => xs.ToIArray().ToSubmeshIndexOffsetAttribute();
        public static GeometryAttribute<int> GetAttributeSubmeshIndexOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.SubmeshIndexOffset);
        public static IArray<int> GetAttributeDataSubmeshIndexOffset(this IGeometryAttributes self) => self.GetAttributeSubmeshIndexOffset()?.Data;
        public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.SubmeshMaterial, index);
        public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.SubmeshMaterial);
        public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this int[] xs, int index) => xs.ToIArray().ToSubmeshMaterialAttribute(index);
        public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this int[] xs) => xs.ToIArray().ToSubmeshMaterialAttribute();
        public static GeometryAttribute<int> GetAttributeSubmeshMaterial(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.SubmeshMaterial);
        public static IArray<int> GetAttributeDataSubmeshMaterial(this IGeometryAttributes self) => self.GetAttributeSubmeshMaterial()?.Data;

    }
}
