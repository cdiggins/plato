
// AUTOGENERATED FILE: DO NOT EDIT
// This file is generated from CommonAttributeExtensions.tt


using Vim.LinqArray;

using Vim.Math3d;

namespace Vim.G3d
{
    // Type has fields True
    // Type has writable fields False
    // Type has public setters False
    public static class CommonAttributes
    {
        // A public instance field named ObjectFaceSize with a type string
        // No associated operation
        // No data-flow analysis could be created
        
        public const string ObjectFaceSize = "g3d:all:facesize:0:int32:1";

        // A public instance field named Index with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string Index = "g3d:corner:index:0:int32:1";

        // A public instance field named Position with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string Position = "g3d:vertex:position:0:float32:3";

        // A public instance field named VertexUv with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexUv = "g3d:vertex:uv:0:float32:2";

        // A public instance field named VertexUvw with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexUvw = "g3d:vertex:uv:0:float32:3";

        // A public instance field named VertexNormal with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexNormal = "g3d:vertex:normal:0:float32:3";

        // A public instance field named VertexColor with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexColor = "g3d:vertex:color:0:float32:4";

        // A public instance field named VertexColor8Bit with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexColor8Bit = "g3d:vertex:color:0:int8:4";

        // A public instance field named VertexBitangent with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexBitangent = "g3d:vertex:bitangent:0:float32:3";

        // A public instance field named VertexTangent with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexTangent = "g3d:vertex:tangent:0:float32:4";

        // A public instance field named VertexSelectionWeight with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string VertexSelectionWeight = "g3d:vertex:weight:0:float32:1";

        // A public instance field named FaceColor with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string FaceColor = "g3d:face:color:0:float32:4";

        // A public instance field named FaceMaterial with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string FaceMaterial = "g3d:face:material:0:int32:1";

        // A public instance field named FaceNormal with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string FaceNormal = "g3d:face:normal:0:float32:3";

        // A public instance field named MeshSubmeshOffset with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string MeshSubmeshOffset = "g3d:mesh:submeshoffset:0:int32:1";

        // A public instance field named InstanceTransform with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string InstanceTransform = "g3d:instance:transform:0:float32:16";

        // A public instance field named InstanceParent with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string InstanceParent = "g3d:instance:parent:0:int32:1";

        // A public instance field named InstanceMesh with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string InstanceMesh = "g3d:instance:mesh:0:int32:1";

        // A public instance field named InstanceFlags with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string InstanceFlags = "g3d:instance:flags:0:uint16:1";

        // A public instance field named LineTangentIn with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string LineTangentIn = "g3d:vertex:tangent:0:float32:3";

        // A public instance field named LineTangentOut with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string LineTangentOut = "g3d:vertex:tangent:1:float32:3";

        // A public instance field named ShapeVertex with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string ShapeVertex = "g3d:shapevertex:position:0:float32:3";

        // A public instance field named ShapeVertexOffset with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string ShapeVertexOffset = "g3d:shape:vertexoffset:0:int32:1";

        // A public instance field named ShapeColor with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string ShapeColor = "g3d:shape:color:0:float32:4";

        // A public instance field named ShapeWidth with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string ShapeWidth = "g3d:shape:width:0:float32:1";

        // A public instance field named MaterialColor with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string MaterialColor = "g3d:material:color:0:float32:4";

        // A public instance field named MaterialGlossiness with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string MaterialGlossiness = "g3d:material:glossiness:0:float32:1";

        // A public instance field named MaterialSmoothness with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string MaterialSmoothness = "g3d:material:smoothness:0:float32:1";

        // A public instance field named SubmeshIndexOffset with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string SubmeshIndexOffset = "g3d:submesh:indexoffset:0:int32:1";

        // A public instance field named SubmeshMaterial with a type string
        // No associated operation
        // No data-flow analysis could be created
                public const string SubmeshMaterial = "g3d:submesh:material:0:int32:1";

    } // type
} // namespace
namespace Vim.G3d
{
    // Type has fields False
    // Type has writable fields False
    // Type has public setters False
    public static class CommonAttributeExtensions
    {
        // A public static method named ToObjectFaceSizeAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = ObjectFaceSize
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
        
        public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.ObjectFaceSize, index);

        // A public static method named ToObjectFaceSizeAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = ObjectFaceSize
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.ObjectFaceSize);

        // A public static method named ToObjectFaceSizeAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this int[] xs, int index) => xs.ToIArray().ToObjectFaceSizeAttribute(index);

        // A public static method named ToObjectFaceSizeAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToObjectFaceSizeAttribute(this int[] xs) => xs.ToIArray().ToObjectFaceSizeAttribute();

        // A public static method named GetAttributeObjectFaceSize with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = ObjectFaceSize
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeObjectFaceSize(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.ObjectFaceSize);

        // A public static method named GetAttributeDataObjectFaceSize with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataObjectFaceSize(this IGeometryAttributes self) => self.GetAttributeObjectFaceSize()?.Data;

        // A public static method named ToIndexAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = Index
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToIndexAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.Index, index);

        // A public static method named ToIndexAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = Index
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToIndexAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.Index);

        // A public static method named ToIndexAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToIndexAttribute(this int[] xs, int index) => xs.ToIArray().ToIndexAttribute(index);

        // A public static method named ToIndexAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToIndexAttribute(this int[] xs) => xs.ToIArray().ToIndexAttribute();

        // A public static method named GetAttributeIndex with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = Index
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeIndex(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.Index);

        // A public static method named GetAttributeDataIndex with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataIndex(this IGeometryAttributes self) => self.GetAttributeIndex()?.Data;

        // A public static method named ToPositionAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = Position
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToPositionAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.Position, index);

        // A public static method named ToPositionAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = Position
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToPositionAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.Position);

        // A public static method named ToPositionAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToPositionAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToPositionAttribute(index);

        // A public static method named ToPositionAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToPositionAttribute(this Vector3[] xs) => xs.ToIArray().ToPositionAttribute();

        // A public static method named GetAttributePosition with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = Position
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributePosition(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.Position);

        // A public static method named GetAttributeDataPosition with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataPosition(this IGeometryAttributes self) => self.GetAttributePosition()?.Data;

        // A public static method named ToVertexUvAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // member references = VertexUv
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector2> ToVertexUvAttribute(this IArray<Vector2> xs, int index) => xs.ToAttribute(CommonAttributes.VertexUv, index);

        // A public static method named ToVertexUvAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // member references = VertexUv
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector2> ToVertexUvAttribute(this IArray<Vector2> xs) => xs.ToAttribute(CommonAttributes.VertexUv);

        // A public static method named ToVertexUvAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector2> ToVertexUvAttribute(this Vector2[] xs, int index) => xs.ToIArray().ToVertexUvAttribute(index);

        // A public static method named ToVertexUvAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector2> ToVertexUvAttribute(this Vector2[] xs) => xs.ToIArray().ToVertexUvAttribute();

        // A public static method named GetAttributeVertexUv with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector2>
        // member references = VertexUv
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector2> GetAttributeVertexUv(this IGeometryAttributes self) => self.GetAttribute<Vector2>(CommonAttributes.VertexUv);

        // A public static method named GetAttributeDataVertexUv with a type Vim.LinqArray.IArray<Vim.Math3d.Vector2>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector2>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector2> GetAttributeDataVertexUv(this IGeometryAttributes self) => self.GetAttributeVertexUv()?.Data;

        // A public static method named ToVertexUvwAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexUvw
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexUvw, index);

        // A public static method named ToVertexUvwAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexUvw
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexUvw);

        // A public static method named ToVertexUvwAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexUvwAttribute(index);

        // A public static method named ToVertexUvwAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexUvwAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexUvwAttribute();

        // A public static method named GetAttributeVertexUvw with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexUvw
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributeVertexUvw(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexUvw);

        // A public static method named GetAttributeDataVertexUvw with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataVertexUvw(this IGeometryAttributes self) => self.GetAttributeVertexUvw()?.Data;

        // A public static method named ToVertexNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexNormal
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexNormal, index);

        // A public static method named ToVertexNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexNormal
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexNormal);

        // A public static method named ToVertexNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexNormalAttribute(index);

        // A public static method named ToVertexNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexNormalAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexNormalAttribute();

        // A public static method named GetAttributeVertexNormal with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexNormal
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributeVertexNormal(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexNormal);

        // A public static method named GetAttributeDataVertexNormal with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataVertexNormal(this IGeometryAttributes self) => self.GetAttributeVertexNormal()?.Data;

        // A public static method named ToVertexColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = VertexColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexColor, index);

        // A public static method named ToVertexColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = VertexColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.VertexColor);

        // A public static method named ToVertexColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToVertexColorAttribute(index);

        // A public static method named ToVertexColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexColorAttribute(this Vector4[] xs) => xs.ToIArray().ToVertexColorAttribute();

        // A public static method named GetAttributeVertexColor with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = VertexColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> GetAttributeVertexColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.VertexColor);

        // A public static method named GetAttributeDataVertexColor with a type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector4> GetAttributeDataVertexColor(this IGeometryAttributes self) => self.GetAttributeVertexColor()?.Data;

        // A public static method named ToVertexColor8BitAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // member references = VertexColor8Bit
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this IArray<Byte4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexColor8Bit, index);

        // A public static method named ToVertexColor8BitAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // member references = VertexColor8Bit
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this IArray<Byte4> xs) => xs.ToAttribute(CommonAttributes.VertexColor8Bit);

        // A public static method named ToVertexColor8BitAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this Byte4[] xs, int index) => xs.ToIArray().ToVertexColor8BitAttribute(index);

        // A public static method named ToVertexColor8BitAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Byte4> ToVertexColor8BitAttribute(this Byte4[] xs) => xs.ToIArray().ToVertexColor8BitAttribute();

        // A public static method named GetAttributeVertexColor8Bit with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Byte4>
        // member references = VertexColor8Bit
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Byte4> GetAttributeVertexColor8Bit(this IGeometryAttributes self) => self.GetAttribute<Byte4>(CommonAttributes.VertexColor8Bit);

        // A public static method named GetAttributeDataVertexColor8Bit with a type Vim.LinqArray.IArray<Vim.Math3d.Byte4>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Byte4>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Byte4> GetAttributeDataVertexColor8Bit(this IGeometryAttributes self) => self.GetAttributeVertexColor8Bit()?.Data;

        // A public static method named ToVertexBitangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexBitangent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.VertexBitangent, index);

        // A public static method named ToVertexBitangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexBitangent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.VertexBitangent);

        // A public static method named ToVertexBitangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToVertexBitangentAttribute(index);

        // A public static method named ToVertexBitangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToVertexBitangentAttribute(this Vector3[] xs) => xs.ToIArray().ToVertexBitangentAttribute();

        // A public static method named GetAttributeVertexBitangent with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = VertexBitangent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributeVertexBitangent(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.VertexBitangent);

        // A public static method named GetAttributeDataVertexBitangent with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataVertexBitangent(this IGeometryAttributes self) => self.GetAttributeVertexBitangent()?.Data;

        // A public static method named ToVertexTangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = VertexTangent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.VertexTangent, index);

        // A public static method named ToVertexTangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = VertexTangent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.VertexTangent);

        // A public static method named ToVertexTangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToVertexTangentAttribute(index);

        // A public static method named ToVertexTangentAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToVertexTangentAttribute(this Vector4[] xs) => xs.ToIArray().ToVertexTangentAttribute();

        // A public static method named GetAttributeVertexTangent with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = VertexTangent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> GetAttributeVertexTangent(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.VertexTangent);

        // A public static method named GetAttributeDataVertexTangent with a type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector4> GetAttributeDataVertexTangent(this IGeometryAttributes self) => self.GetAttributeVertexTangent()?.Data;

        // A public static method named ToVertexSelectionWeightAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = VertexSelectionWeight
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.VertexSelectionWeight, index);

        // A public static method named ToVertexSelectionWeightAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = VertexSelectionWeight
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.VertexSelectionWeight);

        // A public static method named ToVertexSelectionWeightAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this float[] xs, int index) => xs.ToIArray().ToVertexSelectionWeightAttribute(index);

        // A public static method named ToVertexSelectionWeightAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToVertexSelectionWeightAttribute(this float[] xs) => xs.ToIArray().ToVertexSelectionWeightAttribute();

        // A public static method named GetAttributeVertexSelectionWeight with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = VertexSelectionWeight
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> GetAttributeVertexSelectionWeight(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.VertexSelectionWeight);

        // A public static method named GetAttributeDataVertexSelectionWeight with a type Vim.LinqArray.IArray<float>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<float>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<float> GetAttributeDataVertexSelectionWeight(this IGeometryAttributes self) => self.GetAttributeVertexSelectionWeight()?.Data;

        // A public static method named ToFaceColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = FaceColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToFaceColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.FaceColor, index);

        // A public static method named ToFaceColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = FaceColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToFaceColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.FaceColor);

        // A public static method named ToFaceColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToFaceColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToFaceColorAttribute(index);

        // A public static method named ToFaceColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToFaceColorAttribute(this Vector4[] xs) => xs.ToIArray().ToFaceColorAttribute();

        // A public static method named GetAttributeFaceColor with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = FaceColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> GetAttributeFaceColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.FaceColor);

        // A public static method named GetAttributeDataFaceColor with a type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector4> GetAttributeDataFaceColor(this IGeometryAttributes self) => self.GetAttributeFaceColor()?.Data;

        // A public static method named ToFaceMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = FaceMaterial
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToFaceMaterialAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.FaceMaterial, index);

        // A public static method named ToFaceMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = FaceMaterial
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToFaceMaterialAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.FaceMaterial);

        // A public static method named ToFaceMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToFaceMaterialAttribute(this int[] xs, int index) => xs.ToIArray().ToFaceMaterialAttribute(index);

        // A public static method named ToFaceMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToFaceMaterialAttribute(this int[] xs) => xs.ToIArray().ToFaceMaterialAttribute();

        // A public static method named GetAttributeFaceMaterial with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = FaceMaterial
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeFaceMaterial(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.FaceMaterial);

        // A public static method named GetAttributeDataFaceMaterial with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataFaceMaterial(this IGeometryAttributes self) => self.GetAttributeFaceMaterial()?.Data;

        // A public static method named ToFaceNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = FaceNormal
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.FaceNormal, index);

        // A public static method named ToFaceNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = FaceNormal
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.FaceNormal);

        // A public static method named ToFaceNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToFaceNormalAttribute(index);

        // A public static method named ToFaceNormalAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToFaceNormalAttribute(this Vector3[] xs) => xs.ToIArray().ToFaceNormalAttribute();

        // A public static method named GetAttributeFaceNormal with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = FaceNormal
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributeFaceNormal(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.FaceNormal);

        // A public static method named GetAttributeDataFaceNormal with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataFaceNormal(this IGeometryAttributes self) => self.GetAttributeFaceNormal()?.Data;

        // A public static method named ToMeshSubmeshOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = MeshSubmeshOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.MeshSubmeshOffset, index);

        // A public static method named ToMeshSubmeshOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = MeshSubmeshOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.MeshSubmeshOffset);

        // A public static method named ToMeshSubmeshOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToMeshSubmeshOffsetAttribute(index);

        // A public static method named ToMeshSubmeshOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToMeshSubmeshOffsetAttribute(this int[] xs) => xs.ToIArray().ToMeshSubmeshOffsetAttribute();

        // A public static method named GetAttributeMeshSubmeshOffset with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = MeshSubmeshOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeMeshSubmeshOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.MeshSubmeshOffset);

        // A public static method named GetAttributeDataMeshSubmeshOffset with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataMeshSubmeshOffset(this IGeometryAttributes self) => self.GetAttributeMeshSubmeshOffset()?.Data;

        // A public static method named ToInstanceTransformAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // member references = InstanceTransform
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this IArray<Matrix4x4> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceTransform, index);

        // A public static method named ToInstanceTransformAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // member references = InstanceTransform
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this IArray<Matrix4x4> xs) => xs.ToAttribute(CommonAttributes.InstanceTransform);

        // A public static method named ToInstanceTransformAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this Matrix4x4[] xs, int index) => xs.ToIArray().ToInstanceTransformAttribute(index);

        // A public static method named ToInstanceTransformAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Matrix4x4> ToInstanceTransformAttribute(this Matrix4x4[] xs) => xs.ToIArray().ToInstanceTransformAttribute();

        // A public static method named GetAttributeInstanceTransform with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Matrix4x4>
        // member references = InstanceTransform
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Matrix4x4> GetAttributeInstanceTransform(this IGeometryAttributes self) => self.GetAttribute<Matrix4x4>(CommonAttributes.InstanceTransform);

        // A public static method named GetAttributeDataInstanceTransform with a type Vim.LinqArray.IArray<Vim.Math3d.Matrix4x4>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Matrix4x4>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Matrix4x4> GetAttributeDataInstanceTransform(this IGeometryAttributes self) => self.GetAttributeInstanceTransform()?.Data;

        // A public static method named ToInstanceParentAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = InstanceParent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceParentAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceParent, index);

        // A public static method named ToInstanceParentAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = InstanceParent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceParentAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.InstanceParent);

        // A public static method named ToInstanceParentAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceParentAttribute(this int[] xs, int index) => xs.ToIArray().ToInstanceParentAttribute(index);

        // A public static method named ToInstanceParentAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceParentAttribute(this int[] xs) => xs.ToIArray().ToInstanceParentAttribute();

        // A public static method named GetAttributeInstanceParent with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = InstanceParent
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeInstanceParent(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.InstanceParent);

        // A public static method named GetAttributeDataInstanceParent with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataInstanceParent(this IGeometryAttributes self) => self.GetAttributeInstanceParent()?.Data;

        // A public static method named ToInstanceMeshAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = InstanceMesh
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceMeshAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceMesh, index);

        // A public static method named ToInstanceMeshAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = InstanceMesh
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceMeshAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.InstanceMesh);

        // A public static method named ToInstanceMeshAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceMeshAttribute(this int[] xs, int index) => xs.ToIArray().ToInstanceMeshAttribute(index);

        // A public static method named ToInstanceMeshAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToInstanceMeshAttribute(this int[] xs) => xs.ToIArray().ToInstanceMeshAttribute();

        // A public static method named GetAttributeInstanceMesh with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = InstanceMesh
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeInstanceMesh(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.InstanceMesh);

        // A public static method named GetAttributeDataInstanceMesh with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataInstanceMesh(this IGeometryAttributes self) => self.GetAttributeInstanceMesh()?.Data;

        // A public static method named ToInstanceFlagsAttribute with a type Vim.G3d.GeometryAttribute<ushort>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<ushort>
        // member references = InstanceFlags
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this IArray<ushort> xs, int index) => xs.ToAttribute(CommonAttributes.InstanceFlags, index);

        // A public static method named ToInstanceFlagsAttribute with a type Vim.G3d.GeometryAttribute<ushort>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<ushort>
        // member references = InstanceFlags
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this IArray<ushort> xs) => xs.ToAttribute(CommonAttributes.InstanceFlags);

        // A public static method named ToInstanceFlagsAttribute with a type Vim.G3d.GeometryAttribute<ushort>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<ushort>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this ushort[] xs, int index) => xs.ToIArray().ToInstanceFlagsAttribute(index);

        // A public static method named ToInstanceFlagsAttribute with a type Vim.G3d.GeometryAttribute<ushort>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<ushort>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<ushort> ToInstanceFlagsAttribute(this ushort[] xs) => xs.ToIArray().ToInstanceFlagsAttribute();

        // A public static method named GetAttributeInstanceFlags with a type Vim.G3d.GeometryAttribute<ushort>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<ushort>
        // member references = InstanceFlags
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<ushort> GetAttributeInstanceFlags(this IGeometryAttributes self) => self.GetAttribute<ushort>(CommonAttributes.InstanceFlags);

        // A public static method named GetAttributeDataInstanceFlags with a type Vim.LinqArray.IArray<ushort>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<ushort>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<ushort> GetAttributeDataInstanceFlags(this IGeometryAttributes self) => self.GetAttributeInstanceFlags()?.Data;

        // A public static method named ToLineTangentInAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = LineTangentIn
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.LineTangentIn, index);

        // A public static method named ToLineTangentInAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = LineTangentIn
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.LineTangentIn);

        // A public static method named ToLineTangentInAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToLineTangentInAttribute(index);

        // A public static method named ToLineTangentInAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentInAttribute(this Vector3[] xs) => xs.ToIArray().ToLineTangentInAttribute();

        // A public static method named GetAttributeLineTangentIn with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = LineTangentIn
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributeLineTangentIn(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.LineTangentIn);

        // A public static method named GetAttributeDataLineTangentIn with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataLineTangentIn(this IGeometryAttributes self) => self.GetAttributeLineTangentIn()?.Data;

        // A public static method named ToLineTangentOutAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = LineTangentOut
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.LineTangentOut, index);

        // A public static method named ToLineTangentOutAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = LineTangentOut
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.LineTangentOut);

        // A public static method named ToLineTangentOutAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToLineTangentOutAttribute(index);

        // A public static method named ToLineTangentOutAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToLineTangentOutAttribute(this Vector3[] xs) => xs.ToIArray().ToLineTangentOutAttribute();

        // A public static method named GetAttributeLineTangentOut with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = LineTangentOut
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributeLineTangentOut(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.LineTangentOut);

        // A public static method named GetAttributeDataLineTangentOut with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataLineTangentOut(this IGeometryAttributes self) => self.GetAttributeLineTangentOut()?.Data;

        // A public static method named ToShapeVertexAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = ShapeVertex
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this IArray<Vector3> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeVertex, index);

        // A public static method named ToShapeVertexAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = ShapeVertex
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this IArray<Vector3> xs) => xs.ToAttribute(CommonAttributes.ShapeVertex);

        // A public static method named ToShapeVertexAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this Vector3[] xs, int index) => xs.ToIArray().ToShapeVertexAttribute(index);

        // A public static method named ToShapeVertexAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> ToShapeVertexAttribute(this Vector3[] xs) => xs.ToIArray().ToShapeVertexAttribute();

        // A public static method named GetAttributeShapeVertex with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector3>
        // member references = ShapeVertex
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector3> GetAttributeShapeVertex(this IGeometryAttributes self) => self.GetAttribute<Vector3>(CommonAttributes.ShapeVertex);

        // A public static method named GetAttributeDataShapeVertex with a type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector3>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector3> GetAttributeDataShapeVertex(this IGeometryAttributes self) => self.GetAttributeShapeVertex()?.Data;

        // A public static method named ToShapeVertexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = ShapeVertexOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeVertexOffset, index);

        // A public static method named ToShapeVertexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = ShapeVertexOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.ShapeVertexOffset);

        // A public static method named ToShapeVertexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToShapeVertexOffsetAttribute(index);

        // A public static method named ToShapeVertexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToShapeVertexOffsetAttribute(this int[] xs) => xs.ToIArray().ToShapeVertexOffsetAttribute();

        // A public static method named GetAttributeShapeVertexOffset with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = ShapeVertexOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeShapeVertexOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.ShapeVertexOffset);

        // A public static method named GetAttributeDataShapeVertexOffset with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataShapeVertexOffset(this IGeometryAttributes self) => self.GetAttributeShapeVertexOffset()?.Data;

        // A public static method named ToShapeColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = ShapeColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToShapeColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeColor, index);

        // A public static method named ToShapeColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = ShapeColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToShapeColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.ShapeColor);

        // A public static method named ToShapeColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToShapeColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToShapeColorAttribute(index);

        // A public static method named ToShapeColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToShapeColorAttribute(this Vector4[] xs) => xs.ToIArray().ToShapeColorAttribute();

        // A public static method named GetAttributeShapeColor with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = ShapeColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> GetAttributeShapeColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.ShapeColor);

        // A public static method named GetAttributeDataShapeColor with a type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector4> GetAttributeDataShapeColor(this IGeometryAttributes self) => self.GetAttributeShapeColor()?.Data;

        // A public static method named ToShapeWidthAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = ShapeWidth
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToShapeWidthAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.ShapeWidth, index);

        // A public static method named ToShapeWidthAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = ShapeWidth
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToShapeWidthAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.ShapeWidth);

        // A public static method named ToShapeWidthAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToShapeWidthAttribute(this float[] xs, int index) => xs.ToIArray().ToShapeWidthAttribute(index);

        // A public static method named ToShapeWidthAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToShapeWidthAttribute(this float[] xs) => xs.ToIArray().ToShapeWidthAttribute();

        // A public static method named GetAttributeShapeWidth with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = ShapeWidth
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> GetAttributeShapeWidth(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.ShapeWidth);

        // A public static method named GetAttributeDataShapeWidth with a type Vim.LinqArray.IArray<float>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<float>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<float> GetAttributeDataShapeWidth(this IGeometryAttributes self) => self.GetAttributeShapeWidth()?.Data;

        // A public static method named ToMaterialColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = MaterialColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this IArray<Vector4> xs, int index) => xs.ToAttribute(CommonAttributes.MaterialColor, index);

        // A public static method named ToMaterialColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = MaterialColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this IArray<Vector4> xs) => xs.ToAttribute(CommonAttributes.MaterialColor);

        // A public static method named ToMaterialColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this Vector4[] xs, int index) => xs.ToIArray().ToMaterialColorAttribute(index);

        // A public static method named ToMaterialColorAttribute with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> ToMaterialColorAttribute(this Vector4[] xs) => xs.ToIArray().ToMaterialColorAttribute();

        // A public static method named GetAttributeMaterialColor with a type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<Vim.Math3d.Vector4>
        // member references = MaterialColor
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<Vector4> GetAttributeMaterialColor(this IGeometryAttributes self) => self.GetAttribute<Vector4>(CommonAttributes.MaterialColor);

        // A public static method named GetAttributeDataMaterialColor with a type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<Vim.Math3d.Vector4>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<Vector4> GetAttributeDataMaterialColor(this IGeometryAttributes self) => self.GetAttributeMaterialColor()?.Data;

        // A public static method named ToMaterialGlossinessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = MaterialGlossiness
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.MaterialGlossiness, index);

        // A public static method named ToMaterialGlossinessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = MaterialGlossiness
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.MaterialGlossiness);

        // A public static method named ToMaterialGlossinessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this float[] xs, int index) => xs.ToIArray().ToMaterialGlossinessAttribute(index);

        // A public static method named ToMaterialGlossinessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialGlossinessAttribute(this float[] xs) => xs.ToIArray().ToMaterialGlossinessAttribute();

        // A public static method named GetAttributeMaterialGlossiness with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = MaterialGlossiness
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> GetAttributeMaterialGlossiness(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.MaterialGlossiness);

        // A public static method named GetAttributeDataMaterialGlossiness with a type Vim.LinqArray.IArray<float>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<float>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<float> GetAttributeDataMaterialGlossiness(this IGeometryAttributes self) => self.GetAttributeMaterialGlossiness()?.Data;

        // A public static method named ToMaterialSmoothnessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = MaterialSmoothness
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this IArray<float> xs, int index) => xs.ToAttribute(CommonAttributes.MaterialSmoothness, index);

        // A public static method named ToMaterialSmoothnessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = MaterialSmoothness
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this IArray<float> xs) => xs.ToAttribute(CommonAttributes.MaterialSmoothness);

        // A public static method named ToMaterialSmoothnessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this float[] xs, int index) => xs.ToIArray().ToMaterialSmoothnessAttribute(index);

        // A public static method named ToMaterialSmoothnessAttribute with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> ToMaterialSmoothnessAttribute(this float[] xs) => xs.ToIArray().ToMaterialSmoothnessAttribute();

        // A public static method named GetAttributeMaterialSmoothness with a type Vim.G3d.GeometryAttribute<float>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<float>
        // member references = MaterialSmoothness
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<float> GetAttributeMaterialSmoothness(this IGeometryAttributes self) => self.GetAttribute<float>(CommonAttributes.MaterialSmoothness);

        // A public static method named GetAttributeDataMaterialSmoothness with a type Vim.LinqArray.IArray<float>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<float>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<float> GetAttributeDataMaterialSmoothness(this IGeometryAttributes self) => self.GetAttributeMaterialSmoothness()?.Data;

        // A public static method named ToSubmeshIndexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = SubmeshIndexOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.SubmeshIndexOffset, index);

        // A public static method named ToSubmeshIndexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = SubmeshIndexOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.SubmeshIndexOffset);

        // A public static method named ToSubmeshIndexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this int[] xs, int index) => xs.ToIArray().ToSubmeshIndexOffsetAttribute(index);

        // A public static method named ToSubmeshIndexOffsetAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshIndexOffsetAttribute(this int[] xs) => xs.ToIArray().ToSubmeshIndexOffsetAttribute();

        // A public static method named GetAttributeSubmeshIndexOffset with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = SubmeshIndexOffset
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeSubmeshIndexOffset(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.SubmeshIndexOffset);

        // A public static method named GetAttributeDataSubmeshIndexOffset with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataSubmeshIndexOffset(this IGeometryAttributes self) => self.GetAttributeSubmeshIndexOffset()?.Data;

        // A public static method named ToSubmeshMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = SubmeshMaterial
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this IArray<int> xs, int index) => xs.ToAttribute(CommonAttributes.SubmeshMaterial, index);

        // A public static method named ToSubmeshMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = SubmeshMaterial
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this IArray<int> xs) => xs.ToAttribute(CommonAttributes.SubmeshMaterial);

        // A public static method named ToSubmeshMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter), (Name=index Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this int[] xs, int index) => xs.ToIArray().ToSubmeshMaterialAttribute(index);

        // A public static method named ToSubmeshMaterialAttribute with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = 
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=xs Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> ToSubmeshMaterialAttribute(this int[] xs) => xs.ToIArray().ToSubmeshMaterialAttribute();

        // A public static method named GetAttributeSubmeshMaterial with a type Vim.G3d.GeometryAttribute<int>
        // operation kind is Invocation and type Vim.G3d.GeometryAttribute<int>
        // member references = SubmeshMaterial
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static GeometryAttribute<int> GetAttributeSubmeshMaterial(this IGeometryAttributes self) => self.GetAttribute<int>(CommonAttributes.SubmeshMaterial);

        // A public static method named GetAttributeDataSubmeshMaterial with a type Vim.LinqArray.IArray<int>
        // operation kind is ConditionalAccess and type Vim.LinqArray.IArray<int>
        // member references = Data
        // assignments = 
        // Written symbols are 
        // Read symbols are (Name=self Kind=Parameter)
        // Captured symbols are 
        // Variables declared are 
                public static IArray<int> GetAttributeDataSubmeshMaterial(this IGeometryAttributes self) => self.GetAttributeSubmeshMaterial()?.Data;

    } // type
} // namespace
