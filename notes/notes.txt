To-do:

* Get the list of implemented interfaces 
* Definition (and requirement) of "INumeric" is that every field is INumeric
	* Need to validate that.
* Definition (and requirement) of "IVector" is that it is also an INumeric, and that the elements are "INumeric"
* NOTE: a collection of some INumeric type, should automatically have some operations. 
* Todo: there needs to be a bunch of math functions: Math.Sqrt, Math.Abs, etc. 
	* These need to be extension methods (float/double/int/etc.)
	* Then they have to work on all of the INumeric types themselves as extension methods 
* There are then math functions that make sense on an "IVector" or more specifically, any "IArray<Z>". 
	* Maybe for things like Sum() they could work on an IEnumerable. 
	* What would I get ... "Average", "Sum", "Variance", "StandardDeviation". 
	* PrefixSums, PostfixSums, PartialDifference 
	* Maybe a bit more excel type stuff: Binormal distrubition function, Chisquare, 
	* Frequency/histogram
	* Mode/median 
	* Skew/Kurtosis 
	* Student-T distribution 
	* COrrelation 
	* DotProduct 
* To-do: add the interface chain!!! 
* Given a TypeReference ... how do I figure out the declaration?

//==

How should Unity work with Plato code and vice versa.

I want an animation controller:
* Animation controller allows you to assign arbitrary animation to different fields? 
	* I'll say start the animation now, 
	* Animate(50.Seconds(), 1f, 3f);
	* But how do I track it? 
	* I can't "animate" 
	* I have to run the values through the animation controller, which will provide me with values? 
	* var pos = (Circle(t) * Radius).Animate(50.Seconds(), 1f, 3f);

* That last bit is kind of obvious ... I suppose? But the problem is where is time coming from? 
* There are some systems that come directly from the computer, and I can't really do much about that. 

* FileSystem / Keyboard / Mouse / OS / Network / Debugger / Peripherals / Clock 

* So let's say that the animation only starts when a certain condition is set ...
* And let's say the values of that animation are determined elsewhere. 

	* var t = ??;
	* t *= Controller.AddAnimation(50.Seconds(), 0f, 1f);
	* var pos = (Circle(t) * Radius);

* Now the question is, 

	* var t = ??;
	* curve = Controller.AddAnimation(50.Seconds(), 0f, 1f);
	* var pos = (Circle(t * curve) * Radius);

* This is the easy thing. 

* Not even imperative. 
* the challenge is when I want to do something like create a ripple everytime someone clicks.
* The ripple is a thing. I need to collect the ripple curves. 
* That is a list. The list is mutable.
* Each thing in the list is a kind of influence
* The list is the only affine type I need 
//==

* Maybe I could put the VIM structs in a new namespace, and then just generate everything in another namespace. 
Could that work? 

* The problem is that the usage in functions would be mostly illegal. 
* Maybe I 

//==

To-do: 
- With templates all functions have to be defined as extensions.
- The template doesn't allow for much. 
- Well ... technically it does. 
- But the problem is that any function using something else, will fail. This is because in the "template" namespace, things are different. 


- I need to:
	- Infer the "static". Well it is always static, so that is easy.
	- Infer the interfaces. 
	- Does it implement an interface? If so, great then get the interface.
	- Does it implement an 
	- Infer operations
	- Infer composite actions 
	- Infer implicit casts (e.g., ) when only one value, we know that it can to/from that thing.
	- Interface 
	- Functions are made static. 
	- Static function are placed inside the class. 
	- Can a class have a static and non-static with the same name? 


    class AnimatedValue<T>
    {
        Time Time;
        T Value => Function(Time);
        Func<Time, T> Function;
    }

    class Animation<T>
    {
        Func<Time, T> Function;
        T GetValue(Time time) => Function(time);
    }

    public class Mesh
    {
        public IArray<Triangle> Triangles { get; }
        public IArray<Double2> UVs { get; }
        public IArray<Double3> Points { get; }
        public IArray<Int3> Indices { get; }
    }

// 

It's always going to be the same problem. 

I need to compile to have working code.
So ... 

There is part 1: 
* Get the structs and make them valid.
* Part two write the algorithms
* IF I write them as static functions, it is fine ... it just works.  
* If I want to use fluent API in the algorithms, I have to wait for the 
	extension methods to be created. 
* The problem is that those fluent methods are where? 
	I mean if I just write some algorithms, is it going to make a copy of those 
	functions? 
* It's a bit funny, but some of this is just a question of writing it out. 
* The last problem is wrestling with the darn intellisense. 
* Intellisense wants everything to be public / static / compile, etc. 

//==

So what about the interfaces? 
In order to add fun interfaces to the classes, I will have to look for extension methods.
	
//==

Can I do the math operations automatically? 

Does Plato have to be valid C#? Or can I just make it generate. 

After compilation, it will probably all just work. 

The question though is how do I deal with type constraints on numerics. 

I could use a placeholder. 

I don't have to be strict. This is mostly a code generation issue. 
 
I could have a value called "Number" that acts as an implicit place holder. 
Same with Value. 

I could enumerate it Value1, Value2. This implies that they are both values
but different. 

The thing is that operations on generics that are different.

An operation that mixes two different types of numbers is not possible.

Treating an interface like a template argument. 

Some interfaces aren't really interfaces. They are actually 

//==

* I invented concepts.
* It isn't really that useful.
* So the thing is that I need to have interfaces and implementations.
* IArray<T>
* I want to write a Sum() function, so how do I do that?
* So ... I wanto to write some of the algorithms, that are going to be used. 
* IVector ... 

//==

Vector / Number 

* What am I doing? 
* I am defining classes that can be used as a "templates". 
* Do they need to be valid C#? 
	* Maybe. 
* I have decided that Plato is going to be much simpler than C#. 
	* The syntax is tight and small. 
* The thing is that the idea of just predefining all of these extra things is a bit burdensome.
	* HOWEVER ... I don't have time to fix everything. 
	* What I need is for the class templates to just work. 
	* So generate all of the necessary code. 
	* By the way, instead of types, they could just be functions. 
	* That would be interesting. 
* The problem is that I'm getting way too fancy off the bat. 
	* Keep it simple.
	* Look at the structs, generate the core stuff. 
	* Using Roslyn. 
	* The whole thing was a paper tiger.

* I need a "PlatoInput" project.
	* It will have a source file. 
	* I need to restructure all of this stuff. 
	* I need to take it seriously.
	* RIght now I'm confused, and half the stuff isn't used. 
	* People are going to be using this next weekend. 
	* So better get cracking. 

* To do that I will need to:
	* Port the math routines over. 
	* Most should work. 

* So once I have the types, what about the algorithsm. 
	* Where do they live? 
	* I can't just keep adding things to the generator can I? 
	* I need a place to write stuff. 

* The example is:
	* Capsule. 
	* Capsule

* What I find amazing, is that this looks exactly like the visual language I wanted. 

* So we do the structs first. 
* Then we do a pass on the algorithms.

* AlmostEquals
* Epsilon
* Comparison = Gt  :t  
* Measures can be added together 
* CompareTo 
* Measures can be compared
* Clamp 
* Lerp

* Magnitude
* Dot
* MagnitudeSquared
* Sum
* Product
* Compare
* Min
* Max

//==

* Stupid performance hack.
	* Put all of the extension functions in the classes directly 
	* But seriously ... don't do that
	* Just inline at the code site. 
* Do we care about performance
	* Not yet
* The problem:
	* Visual programming mapping to/from 
* I do want:
	* Don't say "public static this" all the freaking time. 
	* Of course it is "public static this", just figure that out. 
* I also want:
	* Express algorithms in terms of concepts. 
	* Express algorithms without supplying the darn type parameters.
	* Type parameters can be implied. 
	* This is an interesting thing. 
* Ultimately, I want to be able to express the entire LinqArray library as a graph.
	* To do this, means the system implies the type signatures. 

//==

* Demos 
	* Drawing the SDFs 
		* How to plot an SDF ? 
		* Pixels 
	* Drawing the 2D functions 
	* Draw it on 

//==

* How to draw a function ... flood fill? 
* Direction - tangent. 
* Piece wise direction. 
* I could do small line segments ... 
* The jagged bits will still show. 
* AB CD EF GH 

//==

November 23rd
=============
Don't forget to add more unit conversion functions.
Also add those functions to integers / floats / doubles.
Bezier2D
Bezier3D
SDF Class (track if it is bounded or exact)
Interpolator interface and class
For Bezier functions: there is amn implicit curve as well. 
Beziers, Lines, and some other things can return an SDF. 

An SDK though is more of an interface than anything.

interface ISignedDistanceField2D {
	double Distance(Point2D p);
	bool Exact;
}

interface ISignedDistanceField3D {
	double Distance(Point2D p);
	bool Exact;
}

Related to this is the problem of finding derivatives. 
Some functions have known derivatives. 

https://twitter.com/Frinklang/status/1536257595610103809?s=20&t=l9tqreYvYRkmaYcJeqNPSw

//==

I can release this stuff bit by bit. 

* Units of measure

//==

x.ToABC => property
x.Multiply() 

//==

* I should implement "IEquatable" as well. 
* And allow doubles to be compared.
* GOing to have a problem with "ToX"

//==

* Getting the LinqArray class to type porperly will be a big deal. 
* Getting numerical concepts to work 
* Get the math libraries compiled
* Get the array libraries compiled. 
* Support JavaScript
* Convert to IR
* Convert the built-in types to IR 
* Build a geometry type
* Get things working with Unity 
* Write an interpreter 
* Get the parakeet parser supported 
* Promote the measures library 

Finishing everything right away is a bit silly 

How to decide. 

* How to handle function constraints. 
* If I see a function that is part of the constraints.
* I basically need to know the type of each function that I encounter.
* This would be a good first step. 
* Break everything down ... and get the list of functions called on each type. 
* I think really this is all going to 

To make the type system work properly I think I am going to need the type parser to work. 

I would like an interpreter for the thing.

I would like a parser that is not dependent on Roslyn. 

Would be fun, but is a bunch of extra work. Maybe later. 

Right now. 

//==

There are two questions: 
* Can I generate IL code?
* Can I generate C# from the IL code? 
* Should I generate JavaScript at the same time?
* Should I use JavaScript for the other things? 
* Can I simplify the auto-generation of code? Right now there is a lot of string magic. 

* I don't like the fact that so much of the code is just magic. 

//==

Intervals could have things like: "Extent"
I notice virtually every value type could have "Min(a, b)" and "Max(a, b)"
The intrinsics are not necessary
I think each type will need to be in a different file. 

//==

Most of the stuff for intervals will work.

I'm working on how to do "Min" / "Max" in a general way. 
I might need to treat numbers like 1-d vectors. 
The other question is what about a TimeInterval? Or any other unit of measure interval? 
Intervals make sense in a number of cases: I just need to be able to subtract them.

I also need to be able to multiply by a double.

// TODO: how do I implement the Math operations on numbers 
Number Sqrt(Number n) => throw new NotImplementedException();

So the "intrinsics" is kind of important. 

VectorizedOperations is kind of what I want as the fundamental operations. 
The problem is that there is a lot of operations on numbers and stuff.

So basically I can look at the things that are defined on a "Number" and then generalize them.

Do I really need to make it all so pretty? 

==

Okay, so instead of having a "Vectorized" version, I can just define the stuff on numbers? 
But what are the definitions? This "vectorized" approach isn't so bad. 

I think I should call it "Vectorized"

These functions can all be generalized. 

Maybe I could simply define it for a number? 
The interesting thing is that it is not "Vectorized", because it is defined on the compound type ... not the element.
self / Magnitude(self)

Are "measures" numbers? The only thing you don't want to do is multiply them together or divide them. 
They are quantities. An interval is like that. 

A vector does not support comparison. 

An interval can be made of Vectors or Scalars or Measures.

Static functions should also be defined as a non-static functions so that they can be called from the calls.
//==

What I am trying to figure out here:
* How do I deal with errors in the editor.
* I can't fix them all.
* It would be nice ... 
* The part that has me stumped is what to do about types that are computed from other types.
* Like elements of an array or return types of a function.
* I could use a special functon I suppose. You usually just want to declare an array of the thing? 
* Or there are cases where what you want is to declare a concrete type within the implementation. 
* Just saying "Any" is no good, because the constraints are not clear. 
* I mean technically I could solve for it as well. It's just the same type inference as everwhere else.
* Two options:
	* Leave it all in C# for now
	* Leave it with errors in the compiler (no intellisense)
* I find it makes a pretty compelling story: removing all of the boilerplate and inferring the correct types.
	In fact it is pretty darn amazing. 
* So "Any" here gets translated into something concrete. Makes sense. 
* Next step:
	* Parse this with the parser.
	* Convert into the intermediate representation (IR).
	* Convert into literal C# 
	* See how bad it is 
	* Generate the "Concepts"? 
	* Perform the type inference
	* 
