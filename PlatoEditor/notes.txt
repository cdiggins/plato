To-do

* Serve the code editor 
* Process updates from the code-editor (have it call the served api)
* Serve all files from the resources automatically 
* Maybe create a folder in the resources section 
* Figure out how to get code editor to take the entire page 

file:///C:/Users/cdigg/git/plato/PlatoCodeEditor/index.html

* I need a code splitter.
	* https://github.com/nathancahill/split

* I need a way to specify the current folder. 

Material UI? 
* https://mui.com/material-ui/react-tree-view/

Tailwind looks great. 
https://tailwindcss.com/

TBH: I am a bit sick of MUI, and I don't think it works well as a Windows 
work horse

I think Bootstrap might be the place to start. 
* It feels a bit clunky. 
* Transitions aren't smooth 
* The look is a bit dated. 
* There is a ton of stuff and examples, and its free.
* Should probably start there and improve later. 

//==

Example Templates:
* Sound
* 3D Graphics
* Shape? 
* HTML output
* CSS output? 
* Console output 
* Markdown document 
* Sound system - https://tonejs.github.io/
* Color gradients 
* Functions 
* Graphs 
* Voxels 
* Choose your own adventure. 
* Fun with parametric curves
* Fun with parametric geometry 
* Image filter
* Programming test 
* Sort visualization
* SVG Output
* Skinned Animation 

//==

A tutorial on fundamental functions. 

//==

Left-side: navigation. 
* src - Source files
* res - Embedded resources (assets)
* cfg - Configuration files: basically project files. One for each target
* doc - Documentation
* dep - Dependencies 


//==

WHere does the test live? 
The test is a combination of source files, and cfg. 

//== 

What about dependencies? 
* We can download the dependencies, recursively. 
* WE could assume that Github will be present forever. 
	* That seems a bit dangerous. 
	* However, the config could specify alternative repos
	* we could provide a mechanism for bundling and creating a locked 
		version of the dependency tree.
	*

//== 

Is every project a Github repository? It totally could be.
Then what becomes interesting is that the system could generate Git 
commands for pushing stuff. 

//==

What about template projects? Pretty standard stuff. 
https://github.com/googlecreativelab/chrome-music-lab

//==

"publishing" => working locally, generated all the cool stuff, 
and then taking the resulting project and having it posted to a web-page.

//==

I'm loving:
https://semantic-ui.com/
and it looks easy to use.

I don't really need much. Just put things up and start going.

//==

Creating:
* Libraries
* Templates
* Apps
* Demos 

//==

I just want a:

* Navigation bar
* Directory navigation 
* Editor
* Menu 
	* Git commands
	* Editor commands 
	* Project commands 
* Key buttons
* Log-in / Profile
* Canvas 
* Splitter


https://medium.com/@martink_rsa/creating-a-react-app-with-create-react-app-and-material-ui-380985fc2b19

//==

A plato template will contain:
* A main file. 
	* Containing things to replace
* Potentially a data file with predefined values 
	* Like a JSON value that can allow some customization
	* These are also replaced, like a Mustache template	
* Other data files that might be needed
	* Like an image
* A help file: 
	* Something that describes the template. 
* Samples 
	* A set of sample to choose from for the given template. 
* A config file
	* Author
	* Date Created
	* Date Modified 
	* Version
	* Original link
	* Hash-code 
	* Provenance (previous version)
	* Dependencies
	* Manifest?
	* Help file
	* Entry point
* A validation function? 
	* Like after compilation, the code needs 
* Something regarding tests? 

//==

What is attractive about Plato? 

* Easy to get started 
	* choose template
	* write code
	* watch results in real-time
	* updates are saved 
	* successful compilations are turned into commits 
	* pushes to Github for you 
	* samples are there 
	* tools are fast 
	* templates are documented and have samples 
	* templates come with tests and validators 
	* editor is very helpful 
		* color picker: https://github.com/wbkd/react-flow/blob/main/examples/vite-app/src/examples/CustomNode/ColorSelectorNode.tsx
		* slider
		* x/y picker: https://github.com/michalochman/react-web-audio-graph/blob/master/src/components/nodes/XYPad.tsx
		* angle
		* radial gauge
		* two value slider
		* clock:  
		* two value radial gauge
		* pull down https://reactflow.dev/docs/examples/overview/
		* time (pendulum)
		* Size (resizeable rect)
		* index range (from, count)
		* logarithmic index range 
		* Collection of points ()
		* array editor 
		* spinner
		* x/y/z 
		* 3D orientation (Show a 2D plane)
		* Fall-off function (2 points, choose interpolation type)
		* Multi-line code editor 
		* Asset chooser 
		* Angle intensity
		* Tabular data (spreadsheet)
		* 

//==

Questions:
* Is there a way to use graphs to pull together high level stuff? 
* Can I use groups to represent functions easily? 
* It looks like I could use React flow to test react components quickly and easily. 
* What if we just looked at functions and got a little mini react flow demo for them.
* Sometimes I want special visualizers. Like for functions to choose and stuff. 
	* Like how does it look as a gradient, or a graph, or a shader on 2D, or on 3D

//==

How to make the template work?
* Call some functions? 
	* Just call the init function. 
	* Add it as a template. 
	* Render / Init
	* What about the new variables I want? 
* Maybe just a class. 
	* user

//== 

June 25th
* Change "Code Mirror 6 to Plato Demo"
* Set-up a splitter
* Need a console. 
* Would LOVE a menu. 
* Actually execute code 
* Run / Stop / Restart button? 
	* Time slider? 
* Would love an icon.
* Try different geometries. 
* Have the function just return a geometry. 
	* having modifiers and what not will be pretty cool. 
	* There is also the question of shading / textures / etc. 
* So the code returns a class, correct? 
	* And then we construct it. 
	* And then we call functions on it. 
* Where does the initial code come from? 
	* 